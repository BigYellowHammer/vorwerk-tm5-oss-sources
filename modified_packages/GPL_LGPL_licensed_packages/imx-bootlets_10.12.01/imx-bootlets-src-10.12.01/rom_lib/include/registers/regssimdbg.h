/*
 *
 * Filename: regssimdbg.h
 *
 * Description: PIO Registers for SIMDBG interface
 *
 * Xml Revision: 1.0
 *
 * Template revision: 20911
 *
 *
 *
 * Copyright (C) Freescale Semiconductor Unpublished
 *
 * Freescale Semiconductor
 * Proprietary & Confidential
 *
 * This source code and the algorithms implemented therein constitute
 * confidential information and may compromise trade secrets of SigmaTel, Inc.
 * or its associates, and any unauthorized use thereof is prohibited.
 *
 *
 *
 * WARNING!  THIS FILE IS AUTOMATICALLY GENERATED FROM XML.
 *                DO NOT MODIFY THIS FILE DIRECTLY.
 *
 *
 *
 * The following naming conventions are followed in this file.
 *      XX_<module>_<regname>_<field>
 *
 * XX specifies the define / macro class
 *      HW pertains to a register
 *      BM indicates a Bit Mask
 *      BF indicates a Bit Field macro
 *
 * <module> is the hardware module name which can be any of the following...
 *      USB20 (Note when there is more than one copy of a given module, the
 *      module name includes a number starting from 0 for the first instance
 *      of that module)
 *
 * <regname> is the specific register within that module
 *
 * <field> is the specific bitfield within that <module>_<register>
 *
 * We also define the following...
 *      hw_<module>_<regname>_t is typedef of anonymous union
 *
 */

#ifndef _SIMDBG_H
#define _SIMDBG_H  1

#include "regs.h"

#ifndef REGS_SIMDBG_BASE
#define REGS_SIMDBG_BASE (REGS_BASE + 0x3c000L)
#endif

/*
 * HW_SIMDBG_CS_REG - SIMDBG Print
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned CS  : 32;
    } B;
} hw_simdbg_cs_reg_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_CS_REG register
 */
#define HW_SIMDBG_CS_REG_ADDR      (0x8003c000)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_CS_REG           (*(volatile hw_simdbg_cs_reg_t *) HW_SIMDBG_CS_REG_ADDR)
#define HW_SIMDBG_CS_REG_RD()      (HW_SIMDBG_CS_REG.U)
#define HW_SIMDBG_CS_REG_WR(v)     (HW_SIMDBG_CS_REG.U = (v))
#define HW_SIMDBG_CS_REG_SET(v)    (HW_SIMDBG_CS_REG_WR(HW_SIMDBG_CS_REG_RD() |  (v)))
#define HW_SIMDBG_CS_REG_CLR(v)    (HW_SIMDBG_CS_REG_WR(HW_SIMDBG_CS_REG_RD() & ~(v)))
#define HW_SIMDBG_CS_REG_TOG(v)    (HW_SIMDBG_CS_REG_WR(HW_SIMDBG_CS_REG_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_CS_REG bitfields
 */
/* --- Register HW_SIMDBG_CS_REG, field CS */

#define BP_SIMDBG_CS_REG_CS      0
#define BM_SIMDBG_CS_REG_CS      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_CS_REG_CS(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_CS_REG_CS(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_CS_REG_CS(v)   (HW_SIMDBG_CS_REG.B.CS = (v))
#endif



/*
 * HW_SIMDBG_PTR_REG - SIMDBG Print
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned POINTER  : 32;
    } B;
} hw_simdbg_ptr_reg_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_PTR_REG register
 */
#define HW_SIMDBG_PTR_REG_ADDR      (0x8003c010)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_PTR_REG           (*(volatile hw_simdbg_ptr_reg_t *) HW_SIMDBG_PTR_REG_ADDR)
#define HW_SIMDBG_PTR_REG_RD()      (HW_SIMDBG_PTR_REG.U)
#define HW_SIMDBG_PTR_REG_WR(v)     (HW_SIMDBG_PTR_REG.U = (v))
#define HW_SIMDBG_PTR_REG_SET(v)    (HW_SIMDBG_PTR_REG_WR(HW_SIMDBG_PTR_REG_RD() |  (v)))
#define HW_SIMDBG_PTR_REG_CLR(v)    (HW_SIMDBG_PTR_REG_WR(HW_SIMDBG_PTR_REG_RD() & ~(v)))
#define HW_SIMDBG_PTR_REG_TOG(v)    (HW_SIMDBG_PTR_REG_WR(HW_SIMDBG_PTR_REG_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_PTR_REG bitfields
 */
/* --- Register HW_SIMDBG_PTR_REG, field POINTER */

#define BP_SIMDBG_PTR_REG_POINTER      0
#define BM_SIMDBG_PTR_REG_POINTER      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_PTR_REG_POINTER(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_PTR_REG_POINTER(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_PTR_REG_POINTER(v)   (HW_SIMDBG_PTR_REG.B.POINTER = (v))
#endif



/*
 * HW_SIMDBG_TERM_REG - SIMDBG Termination Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned COUNT  : 16;
        unsigned CODE   : 16;
    } B;
} hw_simdbg_term_reg_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_TERM_REG register
 */
#define HW_SIMDBG_TERM_REG_ADDR      (0x8003c020)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_TERM_REG           (*(volatile hw_simdbg_term_reg_t *) HW_SIMDBG_TERM_REG_ADDR)
#define HW_SIMDBG_TERM_REG_RD()      (HW_SIMDBG_TERM_REG.U)
#define HW_SIMDBG_TERM_REG_WR(v)     (HW_SIMDBG_TERM_REG.U = (v))
#define HW_SIMDBG_TERM_REG_SET(v)    (HW_SIMDBG_TERM_REG_WR(HW_SIMDBG_TERM_REG_RD() |  (v)))
#define HW_SIMDBG_TERM_REG_CLR(v)    (HW_SIMDBG_TERM_REG_WR(HW_SIMDBG_TERM_REG_RD() & ~(v)))
#define HW_SIMDBG_TERM_REG_TOG(v)    (HW_SIMDBG_TERM_REG_WR(HW_SIMDBG_TERM_REG_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_TERM_REG bitfields
 */
/* --- Register HW_SIMDBG_TERM_REG, field CODE */

#define BP_SIMDBG_TERM_REG_CODE      16
#define BM_SIMDBG_TERM_REG_CODE      0xFFFF0000

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_TERM_REG_CODE(v)   ((((reg32_t) v) << 16) & BM_SIMDBG_TERM_REG_CODE)
#else
#define BF_SIMDBG_TERM_REG_CODE(v)   (((v) << 16) & BM_SIMDBG_TERM_REG_CODE)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_TERM_REG_CODE(v)   (HW_SIMDBG_TERM_REG.B.CODE = (v))
#endif

/* --- Register HW_SIMDBG_TERM_REG, field COUNT */

#define BP_SIMDBG_TERM_REG_COUNT      0
#define BM_SIMDBG_TERM_REG_COUNT      0x0000FFFF

#define BF_SIMDBG_TERM_REG_COUNT(v)   (((v) << 0) & BM_SIMDBG_TERM_REG_COUNT)
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_TERM_REG_COUNT(v)   (HW_SIMDBG_TERM_REG.B.COUNT = (v))
#endif



/*
 * HW_SIMDBG_CHECKPOINT - SIMDBG Checkpoint Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned VALUE  : 32;
    } B;
} hw_simdbg_checkpoint_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_CHECKPOINT register
 */
#define HW_SIMDBG_CHECKPOINT_ADDR      (0x8003c030)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_CHECKPOINT           (*(volatile hw_simdbg_checkpoint_t *) HW_SIMDBG_CHECKPOINT_ADDR)
#define HW_SIMDBG_CHECKPOINT_RD()      (HW_SIMDBG_CHECKPOINT.U)
#define HW_SIMDBG_CHECKPOINT_WR(v)     (HW_SIMDBG_CHECKPOINT.U = (v))
#define HW_SIMDBG_CHECKPOINT_SET(v)    (HW_SIMDBG_CHECKPOINT_WR(HW_SIMDBG_CHECKPOINT_RD() |  (v)))
#define HW_SIMDBG_CHECKPOINT_CLR(v)    (HW_SIMDBG_CHECKPOINT_WR(HW_SIMDBG_CHECKPOINT_RD() & ~(v)))
#define HW_SIMDBG_CHECKPOINT_TOG(v)    (HW_SIMDBG_CHECKPOINT_WR(HW_SIMDBG_CHECKPOINT_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_CHECKPOINT bitfields
 */
/* --- Register HW_SIMDBG_CHECKPOINT, field VALUE */

#define BP_SIMDBG_CHECKPOINT_VALUE      0
#define BM_SIMDBG_CHECKPOINT_VALUE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_CHECKPOINT_VALUE(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_CHECKPOINT_VALUE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_CHECKPOINT_VALUE(v)   (HW_SIMDBG_CHECKPOINT.B.VALUE = (v))
#endif



/*
 * HW_SIMI2CSEL_CFG - SIMMEMSEL configuration register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned CHAN_SEL  :  3;
        unsigned RSVRD0    : 29;
    } B;
} hw_simi2csel_cfg_t;
#endif

/*
 * constants & macros for entire HW_SIMI2CSEL_CFG register
 */
#define HW_SIMI2CSEL_CFG_ADDR      (0x8003c040)

#ifndef __LANGUAGE_ASM__
#define HW_SIMI2CSEL_CFG           (*(volatile hw_simi2csel_cfg_t *) HW_SIMI2CSEL_CFG_ADDR)
#define HW_SIMI2CSEL_CFG_RD()      (HW_SIMI2CSEL_CFG.U)
#define HW_SIMI2CSEL_CFG_WR(v)     (HW_SIMI2CSEL_CFG.U = (v))
#define HW_SIMI2CSEL_CFG_SET(v)    (HW_SIMI2CSEL_CFG_WR(HW_SIMI2CSEL_CFG_RD() |  (v)))
#define HW_SIMI2CSEL_CFG_CLR(v)    (HW_SIMI2CSEL_CFG_WR(HW_SIMI2CSEL_CFG_RD() & ~(v)))
#define HW_SIMI2CSEL_CFG_TOG(v)    (HW_SIMI2CSEL_CFG_WR(HW_SIMI2CSEL_CFG_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMI2CSEL_CFG bitfields
 */
/* --- Register HW_SIMI2CSEL_CFG, field RSVRD0 */

#define BP_SIMI2CSEL_CFG_RSVRD0      3
#define BM_SIMI2CSEL_CFG_RSVRD0      0xFFFFFFF8

#ifndef __LANGUAGE_ASM__
#define BF_SIMI2CSEL_CFG_RSVRD0(v)   ((((reg32_t) v) << 3) & BM_SIMI2CSEL_CFG_RSVRD0)
#else
#define BF_SIMI2CSEL_CFG_RSVRD0(v)   (((v) << 3) & BM_SIMI2CSEL_CFG_RSVRD0)
#endif
/* --- Register HW_SIMI2CSEL_CFG, field CHAN_SEL */

#define BP_SIMI2CSEL_CFG_CHAN_SEL      0
#define BM_SIMI2CSEL_CFG_CHAN_SEL      0x00000007

#define BF_SIMI2CSEL_CFG_CHAN_SEL(v)   (((v) << 0) & BM_SIMI2CSEL_CFG_CHAN_SEL)
#ifndef __LANGUAGE_ASM__
#define BW_SIMI2CSEL_CFG_CHAN_SEL(v)   BF_CS1(SIMI2CSEL_CFG, CHAN_SEL, v)
#endif

#define BV_SIMI2CSEL_CFG_CHAN_SEL__RSRVD      0x0
#define BV_SIMI2CSEL_CFG_CHAN_SEL__I2C0       0x1
#define BV_SIMI2CSEL_CFG_CHAN_SEL__I2C1       0x2
#define BV_SIMI2CSEL_CFG_CHAN_SEL__BOTH_I2C   0x3
#define BV_SIMI2CSEL_CFG_CHAN_SEL__LOOP_BACK  0x4



/*
 * HW_USB_MESSAGE - USB Message Register control
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned MESSAGE_ID  : 32;
    } B;
} hw_usb_message_t;
#endif

/*
 * constants & macros for entire HW_USB_MESSAGE register
 */
#define HW_USB_MESSAGE_ADDR      (0x8003c060)

#ifndef __LANGUAGE_ASM__
#define HW_USB_MESSAGE           (*(volatile hw_usb_message_t *) HW_USB_MESSAGE_ADDR)
#define HW_USB_MESSAGE_RD()      (HW_USB_MESSAGE.U)
#define HW_USB_MESSAGE_WR(v)     (HW_USB_MESSAGE.U = (v))
#define HW_USB_MESSAGE_SET(v)    (HW_USB_MESSAGE_WR(HW_USB_MESSAGE_RD() |  (v)))
#define HW_USB_MESSAGE_CLR(v)    (HW_USB_MESSAGE_WR(HW_USB_MESSAGE_RD() & ~(v)))
#define HW_USB_MESSAGE_TOG(v)    (HW_USB_MESSAGE_WR(HW_USB_MESSAGE_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_USB_MESSAGE bitfields
 */
/* --- Register HW_USB_MESSAGE, field MESSAGE_ID */

#define BP_USB_MESSAGE_MESSAGE_ID      0
#define BM_USB_MESSAGE_MESSAGE_ID      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_USB_MESSAGE_MESSAGE_ID(v)   ((reg32_t) v)
#else
#define BF_USB_MESSAGE_MESSAGE_ID(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_USB_MESSAGE_MESSAGE_ID(v)   (HW_USB_MESSAGE.B.MESSAGE_ID = (v))
#endif



/*
 * HW_USB_MESSAGE_D1 - USB Message Register data
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned MESSAGE_ID  : 32;
    } B;
} hw_usb_message_d1_t;
#endif

/*
 * constants & macros for entire HW_USB_MESSAGE_D1 register
 */
#define HW_USB_MESSAGE_D1_ADDR      (0x8003c064)

#ifndef __LANGUAGE_ASM__
#define HW_USB_MESSAGE_D1           (*(volatile hw_usb_message_d1_t *) HW_USB_MESSAGE_D1_ADDR)
#define HW_USB_MESSAGE_D1_RD()      (HW_USB_MESSAGE_D1.U)
#define HW_USB_MESSAGE_D1_WR(v)     (HW_USB_MESSAGE_D1.U = (v))
#define HW_USB_MESSAGE_D1_SET(v)    (HW_USB_MESSAGE_D1_WR(HW_USB_MESSAGE_D1_RD() |  (v)))
#define HW_USB_MESSAGE_D1_CLR(v)    (HW_USB_MESSAGE_D1_WR(HW_USB_MESSAGE_D1_RD() & ~(v)))
#define HW_USB_MESSAGE_D1_TOG(v)    (HW_USB_MESSAGE_D1_WR(HW_USB_MESSAGE_D1_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_USB_MESSAGE_D1 bitfields
 */
/* --- Register HW_USB_MESSAGE_D1, field MESSAGE_ID */

#define BP_USB_MESSAGE_D1_MESSAGE_ID      0
#define BM_USB_MESSAGE_D1_MESSAGE_ID      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_USB_MESSAGE_D1_MESSAGE_ID(v)   ((reg32_t) v)
#else
#define BF_USB_MESSAGE_D1_MESSAGE_ID(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_USB_MESSAGE_D1_MESSAGE_ID(v)   (HW_USB_MESSAGE_D1.B.MESSAGE_ID = (v))
#endif



/*
 * HW_USB_CMD - USB Command Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned MESSAGE_ID  : 32;
    } B;
} hw_usb_cmd_t;
#endif

/*
 * constants & macros for entire HW_USB_CMD register
 */
#define HW_USB_CMD_ADDR      (0x8003c068)

#ifndef __LANGUAGE_ASM__
#define HW_USB_CMD           (*(volatile hw_usb_cmd_t *) HW_USB_CMD_ADDR)
#define HW_USB_CMD_RD()      (HW_USB_CMD.U)
#define HW_USB_CMD_WR(v)     (HW_USB_CMD.U = (v))
#define HW_USB_CMD_SET(v)    (HW_USB_CMD_WR(HW_USB_CMD_RD() |  (v)))
#define HW_USB_CMD_CLR(v)    (HW_USB_CMD_WR(HW_USB_CMD_RD() & ~(v)))
#define HW_USB_CMD_TOG(v)    (HW_USB_CMD_WR(HW_USB_CMD_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_USB_CMD bitfields
 */
/* --- Register HW_USB_CMD, field MESSAGE_ID */

#define BP_USB_CMD_MESSAGE_ID      0
#define BM_USB_CMD_MESSAGE_ID      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_USB_CMD_MESSAGE_ID(v)   ((reg32_t) v)
#else
#define BF_USB_CMD_MESSAGE_ID(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_USB_CMD_MESSAGE_ID(v)   (HW_USB_CMD.B.MESSAGE_ID = (v))
#endif



/*
 * HW_SIMDBG_UART_CTRL - UART Control Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned VALUE  : 32;
    } B;
} hw_simdbg_uart_ctrl_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_UART_CTRL register
 */
#define HW_SIMDBG_UART_CTRL_ADDR      (0x8003c090)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_UART_CTRL           (*(volatile hw_simdbg_uart_ctrl_t *) HW_SIMDBG_UART_CTRL_ADDR)
#define HW_SIMDBG_UART_CTRL_RD()      (HW_SIMDBG_UART_CTRL.U)
#define HW_SIMDBG_UART_CTRL_WR(v)     (HW_SIMDBG_UART_CTRL.U = (v))
#define HW_SIMDBG_UART_CTRL_SET(v)    (HW_SIMDBG_UART_CTRL_WR(HW_SIMDBG_UART_CTRL_RD() |  (v)))
#define HW_SIMDBG_UART_CTRL_CLR(v)    (HW_SIMDBG_UART_CTRL_WR(HW_SIMDBG_UART_CTRL_RD() & ~(v)))
#define HW_SIMDBG_UART_CTRL_TOG(v)    (HW_SIMDBG_UART_CTRL_WR(HW_SIMDBG_UART_CTRL_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_UART_CTRL bitfields
 */
/* --- Register HW_SIMDBG_UART_CTRL, field VALUE */

#define BP_SIMDBG_UART_CTRL_VALUE      0
#define BM_SIMDBG_UART_CTRL_VALUE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_UART_CTRL_VALUE(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_UART_CTRL_VALUE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_UART_CTRL_VALUE(v)   (HW_SIMDBG_UART_CTRL.B.VALUE = (v))
#endif



/*
 * HW_ROTARY_REG - ROTARY Input Register data
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned ROTARY_REGIN  : 32;
    } B;
} hw_rotary_reg_t;
#endif

/*
 * constants & macros for entire HW_ROTARY_REG register
 */
#define HW_ROTARY_REG_ADDR      (0x8003c0d0)

#ifndef __LANGUAGE_ASM__
#define HW_ROTARY_REG           (*(volatile hw_rotary_reg_t *) HW_ROTARY_REG_ADDR)
#define HW_ROTARY_REG_RD()      (HW_ROTARY_REG.U)
#define HW_ROTARY_REG_WR(v)     (HW_ROTARY_REG.U = (v))
#define HW_ROTARY_REG_SET(v)    (HW_ROTARY_REG_WR(HW_ROTARY_REG_RD() |  (v)))
#define HW_ROTARY_REG_CLR(v)    (HW_ROTARY_REG_WR(HW_ROTARY_REG_RD() & ~(v)))
#define HW_ROTARY_REG_TOG(v)    (HW_ROTARY_REG_WR(HW_ROTARY_REG_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_ROTARY_REG bitfields
 */
/* --- Register HW_ROTARY_REG, field ROTARY_REGIN */

#define BP_ROTARY_REG_ROTARY_REGIN      0
#define BM_ROTARY_REG_ROTARY_REGIN      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_ROTARY_REG_ROTARY_REGIN(v)   ((reg32_t) v)
#else
#define BF_ROTARY_REG_ROTARY_REGIN(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_ROTARY_REG_ROTARY_REGIN(v)   (HW_ROTARY_REG.B.ROTARY_REGIN = (v))
#endif



/*
 * HW_LCDIF_BUF_A - LCDIF data buffer address
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned LCDIF_A  : 32;
    } B;
} hw_lcdif_buf_a_t;
#endif

/*
 * constants & macros for entire HW_LCDIF_BUF_A register
 */
#define HW_LCDIF_BUF_A_ADDR      (0x8003c0d4)

#ifndef __LANGUAGE_ASM__
#define HW_LCDIF_BUF_A           (*(volatile hw_lcdif_buf_a_t *) HW_LCDIF_BUF_A_ADDR)
#define HW_LCDIF_BUF_A_RD()      (HW_LCDIF_BUF_A.U)
#define HW_LCDIF_BUF_A_WR(v)     (HW_LCDIF_BUF_A.U = (v))
#define HW_LCDIF_BUF_A_SET(v)    (HW_LCDIF_BUF_A_WR(HW_LCDIF_BUF_A_RD() |  (v)))
#define HW_LCDIF_BUF_A_CLR(v)    (HW_LCDIF_BUF_A_WR(HW_LCDIF_BUF_A_RD() & ~(v)))
#define HW_LCDIF_BUF_A_TOG(v)    (HW_LCDIF_BUF_A_WR(HW_LCDIF_BUF_A_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_LCDIF_BUF_A bitfields
 */
/* --- Register HW_LCDIF_BUF_A, field LCDIF_A */

#define BP_LCDIF_BUF_A_LCDIF_A      0
#define BM_LCDIF_BUF_A_LCDIF_A      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_LCDIF_BUF_A_LCDIF_A(v)   ((reg32_t) v)
#else
#define BF_LCDIF_BUF_A_LCDIF_A(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_LCDIF_BUF_A_LCDIF_A(v)   (HW_LCDIF_BUF_A.B.LCDIF_A = (v))
#endif



/*
 * HW_LCDIF_BUF_SIZE - LCDIF data size-byte-trigger
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned LCDIF_SIZE  : 32;
    } B;
} hw_lcdif_buf_size_t;
#endif

/*
 * constants & macros for entire HW_LCDIF_BUF_SIZE register
 */
#define HW_LCDIF_BUF_SIZE_ADDR      (0x8003c0d8)

#ifndef __LANGUAGE_ASM__
#define HW_LCDIF_BUF_SIZE           (*(volatile hw_lcdif_buf_size_t *) HW_LCDIF_BUF_SIZE_ADDR)
#define HW_LCDIF_BUF_SIZE_RD()      (HW_LCDIF_BUF_SIZE.U)
#define HW_LCDIF_BUF_SIZE_WR(v)     (HW_LCDIF_BUF_SIZE.U = (v))
#define HW_LCDIF_BUF_SIZE_SET(v)    (HW_LCDIF_BUF_SIZE_WR(HW_LCDIF_BUF_SIZE_RD() |  (v)))
#define HW_LCDIF_BUF_SIZE_CLR(v)    (HW_LCDIF_BUF_SIZE_WR(HW_LCDIF_BUF_SIZE_RD() & ~(v)))
#define HW_LCDIF_BUF_SIZE_TOG(v)    (HW_LCDIF_BUF_SIZE_WR(HW_LCDIF_BUF_SIZE_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_LCDIF_BUF_SIZE bitfields
 */
/* --- Register HW_LCDIF_BUF_SIZE, field LCDIF_SIZE */

#define BP_LCDIF_BUF_SIZE_LCDIF_SIZE      0
#define BM_LCDIF_BUF_SIZE_LCDIF_SIZE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_LCDIF_BUF_SIZE_LCDIF_SIZE(v)   ((reg32_t) v)
#else
#define BF_LCDIF_BUF_SIZE_LCDIF_SIZE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_LCDIF_BUF_SIZE_LCDIF_SIZE(v)   (HW_LCDIF_BUF_SIZE.B.LCDIF_SIZE = (v))
#endif



/*
 * HW_PXP_BUF_SIZE - PXP data size-byte-trigger
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned PXP_SIZE  : 32;
    } B;
} hw_pxp_buf_size_t;
#endif

/*
 * constants & macros for entire HW_PXP_BUF_SIZE register
 */
#define HW_PXP_BUF_SIZE_ADDR      (0x8003c0dc)

#ifndef __LANGUAGE_ASM__
#define HW_PXP_BUF_SIZE           (*(volatile hw_pxp_buf_size_t *) HW_PXP_BUF_SIZE_ADDR)
#define HW_PXP_BUF_SIZE_RD()      (HW_PXP_BUF_SIZE.U)
#define HW_PXP_BUF_SIZE_WR(v)     (HW_PXP_BUF_SIZE.U = (v))
#define HW_PXP_BUF_SIZE_SET(v)    (HW_PXP_BUF_SIZE_WR(HW_PXP_BUF_SIZE_RD() |  (v)))
#define HW_PXP_BUF_SIZE_CLR(v)    (HW_PXP_BUF_SIZE_WR(HW_PXP_BUF_SIZE_RD() & ~(v)))
#define HW_PXP_BUF_SIZE_TOG(v)    (HW_PXP_BUF_SIZE_WR(HW_PXP_BUF_SIZE_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_PXP_BUF_SIZE bitfields
 */
/* --- Register HW_PXP_BUF_SIZE, field PXP_SIZE */

#define BP_PXP_BUF_SIZE_PXP_SIZE      0
#define BM_PXP_BUF_SIZE_PXP_SIZE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_PXP_BUF_SIZE_PXP_SIZE(v)   ((reg32_t) v)
#else
#define BF_PXP_BUF_SIZE_PXP_SIZE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_PXP_BUF_SIZE_PXP_SIZE(v)   (HW_PXP_BUF_SIZE.B.PXP_SIZE = (v))
#endif



/*
 * HW_LCDIF_PAD_TRI - LCDIF PAD TRI connection
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned LCDIF_PAD  : 32;
    } B;
} hw_lcdif_pad_tri_t;
#endif

/*
 * constants & macros for entire HW_LCDIF_PAD_TRI register
 */
#define HW_LCDIF_PAD_TRI_ADDR      (0x8003c0e0)

#ifndef __LANGUAGE_ASM__
#define HW_LCDIF_PAD_TRI           (*(volatile hw_lcdif_pad_tri_t *) HW_LCDIF_PAD_TRI_ADDR)
#define HW_LCDIF_PAD_TRI_RD()      (HW_LCDIF_PAD_TRI.U)
#define HW_LCDIF_PAD_TRI_WR(v)     (HW_LCDIF_PAD_TRI.U = (v))
#define HW_LCDIF_PAD_TRI_SET(v)    (HW_LCDIF_PAD_TRI_WR(HW_LCDIF_PAD_TRI_RD() |  (v)))
#define HW_LCDIF_PAD_TRI_CLR(v)    (HW_LCDIF_PAD_TRI_WR(HW_LCDIF_PAD_TRI_RD() & ~(v)))
#define HW_LCDIF_PAD_TRI_TOG(v)    (HW_LCDIF_PAD_TRI_WR(HW_LCDIF_PAD_TRI_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_LCDIF_PAD_TRI bitfields
 */
/* --- Register HW_LCDIF_PAD_TRI, field LCDIF_PAD */

#define BP_LCDIF_PAD_TRI_LCDIF_PAD      0
#define BM_LCDIF_PAD_TRI_LCDIF_PAD      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_LCDIF_PAD_TRI_LCDIF_PAD(v)   ((reg32_t) v)
#else
#define BF_LCDIF_PAD_TRI_LCDIF_PAD(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_LCDIF_PAD_TRI_LCDIF_PAD(v)   (HW_LCDIF_PAD_TRI.B.LCDIF_PAD = (v))
#endif



/*
 * HW_LCDIF_DVI_BUF_SIZE - LCDIF DVI mode size-byte-trigger
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned LCDIF_DVI_SIZE  : 32;
    } B;
} hw_lcdif_dvi_buf_size_t;
#endif

/*
 * constants & macros for entire HW_LCDIF_DVI_BUF_SIZE register
 */
#define HW_LCDIF_DVI_BUF_SIZE_ADDR      (0x8003c0e4)

#ifndef __LANGUAGE_ASM__
#define HW_LCDIF_DVI_BUF_SIZE           (*(volatile hw_lcdif_dvi_buf_size_t *) HW_LCDIF_DVI_BUF_SIZE_ADDR)
#define HW_LCDIF_DVI_BUF_SIZE_RD()      (HW_LCDIF_DVI_BUF_SIZE.U)
#define HW_LCDIF_DVI_BUF_SIZE_WR(v)     (HW_LCDIF_DVI_BUF_SIZE.U = (v))
#define HW_LCDIF_DVI_BUF_SIZE_SET(v)    (HW_LCDIF_DVI_BUF_SIZE_WR(HW_LCDIF_DVI_BUF_SIZE_RD() |  (v)))
#define HW_LCDIF_DVI_BUF_SIZE_CLR(v)    (HW_LCDIF_DVI_BUF_SIZE_WR(HW_LCDIF_DVI_BUF_SIZE_RD() & ~(v)))
#define HW_LCDIF_DVI_BUF_SIZE_TOG(v)    (HW_LCDIF_DVI_BUF_SIZE_WR(HW_LCDIF_DVI_BUF_SIZE_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_LCDIF_DVI_BUF_SIZE bitfields
 */
/* --- Register HW_LCDIF_DVI_BUF_SIZE, field LCDIF_DVI_SIZE */

#define BP_LCDIF_DVI_BUF_SIZE_LCDIF_DVI_SIZE      0
#define BM_LCDIF_DVI_BUF_SIZE_LCDIF_DVI_SIZE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_LCDIF_DVI_BUF_SIZE_LCDIF_DVI_SIZE(v)   ((reg32_t) v)
#else
#define BF_LCDIF_DVI_BUF_SIZE_LCDIF_DVI_SIZE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_LCDIF_DVI_BUF_SIZE_LCDIF_DVI_SIZE(v)   (HW_LCDIF_DVI_BUF_SIZE.B.LCDIF_DVI_SIZE = (v))
#endif



/*
 * HW_LCDIF_READ_SIZE - LCDIF MPU read mode size-byte-trigger
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned LCDIF_READ_SIZE  : 32;
    } B;
} hw_lcdif_read_size_t;
#endif

/*
 * constants & macros for entire HW_LCDIF_READ_SIZE register
 */
#define HW_LCDIF_READ_SIZE_ADDR      (0x8003c0e8)

#ifndef __LANGUAGE_ASM__
#define HW_LCDIF_READ_SIZE           (*(volatile hw_lcdif_read_size_t *) HW_LCDIF_READ_SIZE_ADDR)
#define HW_LCDIF_READ_SIZE_RD()      (HW_LCDIF_READ_SIZE.U)
#define HW_LCDIF_READ_SIZE_WR(v)     (HW_LCDIF_READ_SIZE.U = (v))
#define HW_LCDIF_READ_SIZE_SET(v)    (HW_LCDIF_READ_SIZE_WR(HW_LCDIF_READ_SIZE_RD() |  (v)))
#define HW_LCDIF_READ_SIZE_CLR(v)    (HW_LCDIF_READ_SIZE_WR(HW_LCDIF_READ_SIZE_RD() & ~(v)))
#define HW_LCDIF_READ_SIZE_TOG(v)    (HW_LCDIF_READ_SIZE_WR(HW_LCDIF_READ_SIZE_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_LCDIF_READ_SIZE bitfields
 */
/* --- Register HW_LCDIF_READ_SIZE, field LCDIF_READ_SIZE */

#define BP_LCDIF_READ_SIZE_LCDIF_READ_SIZE      0
#define BM_LCDIF_READ_SIZE_LCDIF_READ_SIZE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_LCDIF_READ_SIZE_LCDIF_READ_SIZE(v)   ((reg32_t) v)
#else
#define BF_LCDIF_READ_SIZE_LCDIF_READ_SIZE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_LCDIF_READ_SIZE_LCDIF_READ_SIZE(v)   (HW_LCDIF_READ_SIZE.B.LCDIF_READ_SIZE = (v))
#endif



/*
 * HW_LCDIF_READ_CHECK - LCDIF MPU read mode result check
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned LCDIF_READ_CHECK  : 32;
    } B;
} hw_lcdif_read_check_t;
#endif

/*
 * constants & macros for entire HW_LCDIF_READ_CHECK register
 */
#define HW_LCDIF_READ_CHECK_ADDR      (0x8003c0ec)

#ifndef __LANGUAGE_ASM__
#define HW_LCDIF_READ_CHECK           (*(volatile hw_lcdif_read_check_t *) HW_LCDIF_READ_CHECK_ADDR)
#define HW_LCDIF_READ_CHECK_RD()      (HW_LCDIF_READ_CHECK.U)
#define HW_LCDIF_READ_CHECK_WR(v)     (HW_LCDIF_READ_CHECK.U = (v))
#define HW_LCDIF_READ_CHECK_SET(v)    (HW_LCDIF_READ_CHECK_WR(HW_LCDIF_READ_CHECK_RD() |  (v)))
#define HW_LCDIF_READ_CHECK_CLR(v)    (HW_LCDIF_READ_CHECK_WR(HW_LCDIF_READ_CHECK_RD() & ~(v)))
#define HW_LCDIF_READ_CHECK_TOG(v)    (HW_LCDIF_READ_CHECK_WR(HW_LCDIF_READ_CHECK_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_LCDIF_READ_CHECK bitfields
 */
/* --- Register HW_LCDIF_READ_CHECK, field LCDIF_READ_CHECK */

#define BP_LCDIF_READ_CHECK_LCDIF_READ_CHECK      0
#define BM_LCDIF_READ_CHECK_LCDIF_READ_CHECK      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_LCDIF_READ_CHECK_LCDIF_READ_CHECK(v)   ((reg32_t) v)
#else
#define BF_LCDIF_READ_CHECK_LCDIF_READ_CHECK(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_LCDIF_READ_CHECK_LCDIF_READ_CHECK(v)   (HW_LCDIF_READ_CHECK.B.LCDIF_READ_CHECK = (v))
#endif



/*
 * HW_SIMDBG_RAMDUMP_START - SIMDBG RAM Dump Start Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned VALUE  : 32;
    } B;
} hw_simdbg_ramdump_start_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_RAMDUMP_START register
 */
#define HW_SIMDBG_RAMDUMP_START_ADDR      (0x8003c100)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_RAMDUMP_START           (*(volatile hw_simdbg_ramdump_start_t *) HW_SIMDBG_RAMDUMP_START_ADDR)
#define HW_SIMDBG_RAMDUMP_START_RD()      (HW_SIMDBG_RAMDUMP_START.U)
#define HW_SIMDBG_RAMDUMP_START_WR(v)     (HW_SIMDBG_RAMDUMP_START.U = (v))
#define HW_SIMDBG_RAMDUMP_START_SET(v)    (HW_SIMDBG_RAMDUMP_START_WR(HW_SIMDBG_RAMDUMP_START_RD() |  (v)))
#define HW_SIMDBG_RAMDUMP_START_CLR(v)    (HW_SIMDBG_RAMDUMP_START_WR(HW_SIMDBG_RAMDUMP_START_RD() & ~(v)))
#define HW_SIMDBG_RAMDUMP_START_TOG(v)    (HW_SIMDBG_RAMDUMP_START_WR(HW_SIMDBG_RAMDUMP_START_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_RAMDUMP_START bitfields
 */
/* --- Register HW_SIMDBG_RAMDUMP_START, field VALUE */

#define BP_SIMDBG_RAMDUMP_START_VALUE      0
#define BM_SIMDBG_RAMDUMP_START_VALUE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_RAMDUMP_START_VALUE(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_RAMDUMP_START_VALUE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_RAMDUMP_START_VALUE(v)   (HW_SIMDBG_RAMDUMP_START.B.VALUE = (v))
#endif



/*
 * HW_SIMDBG_RAMDUMP_END - SIMDBG RAM Dump End Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned VALUE  : 32;
    } B;
} hw_simdbg_ramdump_end_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_RAMDUMP_END register
 */
#define HW_SIMDBG_RAMDUMP_END_ADDR      (0x8003c104)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_RAMDUMP_END           (*(volatile hw_simdbg_ramdump_end_t *) HW_SIMDBG_RAMDUMP_END_ADDR)
#define HW_SIMDBG_RAMDUMP_END_RD()      (HW_SIMDBG_RAMDUMP_END.U)
#define HW_SIMDBG_RAMDUMP_END_WR(v)     (HW_SIMDBG_RAMDUMP_END.U = (v))
#define HW_SIMDBG_RAMDUMP_END_SET(v)    (HW_SIMDBG_RAMDUMP_END_WR(HW_SIMDBG_RAMDUMP_END_RD() |  (v)))
#define HW_SIMDBG_RAMDUMP_END_CLR(v)    (HW_SIMDBG_RAMDUMP_END_WR(HW_SIMDBG_RAMDUMP_END_RD() & ~(v)))
#define HW_SIMDBG_RAMDUMP_END_TOG(v)    (HW_SIMDBG_RAMDUMP_END_WR(HW_SIMDBG_RAMDUMP_END_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_RAMDUMP_END bitfields
 */
/* --- Register HW_SIMDBG_RAMDUMP_END, field VALUE */

#define BP_SIMDBG_RAMDUMP_END_VALUE      0
#define BM_SIMDBG_RAMDUMP_END_VALUE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_RAMDUMP_END_VALUE(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_RAMDUMP_END_VALUE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_RAMDUMP_END_VALUE(v)   (HW_SIMDBG_RAMDUMP_END.B.VALUE = (v))
#endif



/*
 * HW_SAIF_LOOPBACK_CTRL - SAIF Loopback Control
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned VALUE  : 32;
    } B;
} hw_saif_loopback_ctrl_t;
#endif

/*
 * constants & macros for entire HW_SAIF_LOOPBACK_CTRL register
 */
#define HW_SAIF_LOOPBACK_CTRL_ADDR      (0x8003c110)

#ifndef __LANGUAGE_ASM__
#define HW_SAIF_LOOPBACK_CTRL           (*(volatile hw_saif_loopback_ctrl_t *) HW_SAIF_LOOPBACK_CTRL_ADDR)
#define HW_SAIF_LOOPBACK_CTRL_RD()      (HW_SAIF_LOOPBACK_CTRL.U)
#define HW_SAIF_LOOPBACK_CTRL_WR(v)     (HW_SAIF_LOOPBACK_CTRL.U = (v))
#define HW_SAIF_LOOPBACK_CTRL_SET(v)    (HW_SAIF_LOOPBACK_CTRL_WR(HW_SAIF_LOOPBACK_CTRL_RD() |  (v)))
#define HW_SAIF_LOOPBACK_CTRL_CLR(v)    (HW_SAIF_LOOPBACK_CTRL_WR(HW_SAIF_LOOPBACK_CTRL_RD() & ~(v)))
#define HW_SAIF_LOOPBACK_CTRL_TOG(v)    (HW_SAIF_LOOPBACK_CTRL_WR(HW_SAIF_LOOPBACK_CTRL_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SAIF_LOOPBACK_CTRL bitfields
 */
/* --- Register HW_SAIF_LOOPBACK_CTRL, field VALUE */

#define BP_SAIF_LOOPBACK_CTRL_VALUE      0
#define BM_SAIF_LOOPBACK_CTRL_VALUE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SAIF_LOOPBACK_CTRL_VALUE(v)   ((reg32_t) v)
#else
#define BF_SAIF_LOOPBACK_CTRL_VALUE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SAIF_LOOPBACK_CTRL_VALUE(v)   (HW_SAIF_LOOPBACK_CTRL.B.VALUE = (v))
#endif



/*
 * HW_BROWNOUT_CTRL - Brownout Generator Control
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned VALUE  : 32;
    } B;
} hw_brownout_ctrl_t;
#endif

/*
 * constants & macros for entire HW_BROWNOUT_CTRL register
 */
#define HW_BROWNOUT_CTRL_ADDR      (0x8003c120)

#ifndef __LANGUAGE_ASM__
#define HW_BROWNOUT_CTRL           (*(volatile hw_brownout_ctrl_t *) HW_BROWNOUT_CTRL_ADDR)
#define HW_BROWNOUT_CTRL_RD()      (HW_BROWNOUT_CTRL.U)
#define HW_BROWNOUT_CTRL_WR(v)     (HW_BROWNOUT_CTRL.U = (v))
#define HW_BROWNOUT_CTRL_SET(v)    (HW_BROWNOUT_CTRL_WR(HW_BROWNOUT_CTRL_RD() |  (v)))
#define HW_BROWNOUT_CTRL_CLR(v)    (HW_BROWNOUT_CTRL_WR(HW_BROWNOUT_CTRL_RD() & ~(v)))
#define HW_BROWNOUT_CTRL_TOG(v)    (HW_BROWNOUT_CTRL_WR(HW_BROWNOUT_CTRL_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_BROWNOUT_CTRL bitfields
 */
/* --- Register HW_BROWNOUT_CTRL, field VALUE */

#define BP_BROWNOUT_CTRL_VALUE      0
#define BM_BROWNOUT_CTRL_VALUE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_BROWNOUT_CTRL_VALUE(v)   ((reg32_t) v)
#else
#define BF_BROWNOUT_CTRL_VALUE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_BROWNOUT_CTRL_VALUE(v)   (HW_BROWNOUT_CTRL.B.VALUE = (v))
#endif



/*
 * HW_PWD_CHECK - POWER DOWN CHECK
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned VALUE  : 32;
    } B;
} hw_pwd_check_t;
#endif

/*
 * constants & macros for entire HW_PWD_CHECK register
 */
#define HW_PWD_CHECK_ADDR      (0x8003c130)

#ifndef __LANGUAGE_ASM__
#define HW_PWD_CHECK           (*(volatile hw_pwd_check_t *) HW_PWD_CHECK_ADDR)
#define HW_PWD_CHECK_RD()      (HW_PWD_CHECK.U)
#define HW_PWD_CHECK_WR(v)     (HW_PWD_CHECK.U = (v))
#define HW_PWD_CHECK_SET(v)    (HW_PWD_CHECK_WR(HW_PWD_CHECK_RD() |  (v)))
#define HW_PWD_CHECK_CLR(v)    (HW_PWD_CHECK_WR(HW_PWD_CHECK_RD() & ~(v)))
#define HW_PWD_CHECK_TOG(v)    (HW_PWD_CHECK_WR(HW_PWD_CHECK_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_PWD_CHECK bitfields
 */
/* --- Register HW_PWD_CHECK, field VALUE */

#define BP_PWD_CHECK_VALUE      0
#define BM_PWD_CHECK_VALUE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_PWD_CHECK_VALUE(v)   ((reg32_t) v)
#else
#define BF_PWD_CHECK_VALUE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_PWD_CHECK_VALUE(v)   (HW_PWD_CHECK.B.VALUE = (v))
#endif



/*
 * HW_SIMDBG_PERFMON_ACTIVE_CYCLE - perfmon active cycle
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned VALUE  : 32;
    } B;
} hw_simdbg_perfmon_active_cycle_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_PERFMON_ACTIVE_CYCLE register
 */
#define HW_SIMDBG_PERFMON_ACTIVE_CYCLE_ADDR      (0x8003c140)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_PERFMON_ACTIVE_CYCLE           (*(volatile hw_simdbg_perfmon_active_cycle_t *) HW_SIMDBG_PERFMON_ACTIVE_CYCLE_ADDR)
#define HW_SIMDBG_PERFMON_ACTIVE_CYCLE_RD()      (HW_SIMDBG_PERFMON_ACTIVE_CYCLE.U)
#define HW_SIMDBG_PERFMON_ACTIVE_CYCLE_WR(v)     (HW_SIMDBG_PERFMON_ACTIVE_CYCLE.U = (v))
#define HW_SIMDBG_PERFMON_ACTIVE_CYCLE_SET(v)    (HW_SIMDBG_PERFMON_ACTIVE_CYCLE_WR(HW_SIMDBG_PERFMON_ACTIVE_CYCLE_RD() |  (v)))
#define HW_SIMDBG_PERFMON_ACTIVE_CYCLE_CLR(v)    (HW_SIMDBG_PERFMON_ACTIVE_CYCLE_WR(HW_SIMDBG_PERFMON_ACTIVE_CYCLE_RD() & ~(v)))
#define HW_SIMDBG_PERFMON_ACTIVE_CYCLE_TOG(v)    (HW_SIMDBG_PERFMON_ACTIVE_CYCLE_WR(HW_SIMDBG_PERFMON_ACTIVE_CYCLE_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_PERFMON_ACTIVE_CYCLE bitfields
 */
/* --- Register HW_SIMDBG_PERFMON_ACTIVE_CYCLE, field VALUE */

#define BP_SIMDBG_PERFMON_ACTIVE_CYCLE_VALUE      0
#define BM_SIMDBG_PERFMON_ACTIVE_CYCLE_VALUE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_PERFMON_ACTIVE_CYCLE_VALUE(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_PERFMON_ACTIVE_CYCLE_VALUE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_PERFMON_ACTIVE_CYCLE_VALUE(v)   (HW_SIMDBG_PERFMON_ACTIVE_CYCLE.B.VALUE = (v))
#endif



/*
 * HW_SIMDBG_PERFMON_TRANS_CNT - perfmon transfer count
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned VALUE  : 32;
    } B;
} hw_simdbg_perfmon_trans_cnt_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_PERFMON_TRANS_CNT register
 */
#define HW_SIMDBG_PERFMON_TRANS_CNT_ADDR      (0x8003c144)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_PERFMON_TRANS_CNT           (*(volatile hw_simdbg_perfmon_trans_cnt_t *) HW_SIMDBG_PERFMON_TRANS_CNT_ADDR)
#define HW_SIMDBG_PERFMON_TRANS_CNT_RD()      (HW_SIMDBG_PERFMON_TRANS_CNT.U)
#define HW_SIMDBG_PERFMON_TRANS_CNT_WR(v)     (HW_SIMDBG_PERFMON_TRANS_CNT.U = (v))
#define HW_SIMDBG_PERFMON_TRANS_CNT_SET(v)    (HW_SIMDBG_PERFMON_TRANS_CNT_WR(HW_SIMDBG_PERFMON_TRANS_CNT_RD() |  (v)))
#define HW_SIMDBG_PERFMON_TRANS_CNT_CLR(v)    (HW_SIMDBG_PERFMON_TRANS_CNT_WR(HW_SIMDBG_PERFMON_TRANS_CNT_RD() & ~(v)))
#define HW_SIMDBG_PERFMON_TRANS_CNT_TOG(v)    (HW_SIMDBG_PERFMON_TRANS_CNT_WR(HW_SIMDBG_PERFMON_TRANS_CNT_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_PERFMON_TRANS_CNT bitfields
 */
/* --- Register HW_SIMDBG_PERFMON_TRANS_CNT, field VALUE */

#define BP_SIMDBG_PERFMON_TRANS_CNT_VALUE      0
#define BM_SIMDBG_PERFMON_TRANS_CNT_VALUE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_PERFMON_TRANS_CNT_VALUE(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_PERFMON_TRANS_CNT_VALUE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_PERFMON_TRANS_CNT_VALUE(v)   (HW_SIMDBG_PERFMON_TRANS_CNT.B.VALUE = (v))
#endif



/*
 * HW_SIMDBG_PERFMON_TOTAL_LAT - perfmon total latency
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned VALUE  : 32;
    } B;
} hw_simdbg_perfmon_total_lat_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_PERFMON_TOTAL_LAT register
 */
#define HW_SIMDBG_PERFMON_TOTAL_LAT_ADDR      (0x8003c148)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_PERFMON_TOTAL_LAT           (*(volatile hw_simdbg_perfmon_total_lat_t *) HW_SIMDBG_PERFMON_TOTAL_LAT_ADDR)
#define HW_SIMDBG_PERFMON_TOTAL_LAT_RD()      (HW_SIMDBG_PERFMON_TOTAL_LAT.U)
#define HW_SIMDBG_PERFMON_TOTAL_LAT_WR(v)     (HW_SIMDBG_PERFMON_TOTAL_LAT.U = (v))
#define HW_SIMDBG_PERFMON_TOTAL_LAT_SET(v)    (HW_SIMDBG_PERFMON_TOTAL_LAT_WR(HW_SIMDBG_PERFMON_TOTAL_LAT_RD() |  (v)))
#define HW_SIMDBG_PERFMON_TOTAL_LAT_CLR(v)    (HW_SIMDBG_PERFMON_TOTAL_LAT_WR(HW_SIMDBG_PERFMON_TOTAL_LAT_RD() & ~(v)))
#define HW_SIMDBG_PERFMON_TOTAL_LAT_TOG(v)    (HW_SIMDBG_PERFMON_TOTAL_LAT_WR(HW_SIMDBG_PERFMON_TOTAL_LAT_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_PERFMON_TOTAL_LAT bitfields
 */
/* --- Register HW_SIMDBG_PERFMON_TOTAL_LAT, field VALUE */

#define BP_SIMDBG_PERFMON_TOTAL_LAT_VALUE      0
#define BM_SIMDBG_PERFMON_TOTAL_LAT_VALUE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_PERFMON_TOTAL_LAT_VALUE(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_PERFMON_TOTAL_LAT_VALUE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_PERFMON_TOTAL_LAT_VALUE(v)   (HW_SIMDBG_PERFMON_TOTAL_LAT.B.VALUE = (v))
#endif



/*
 * HW_SIMDBG_PERFMON_DATA_CNT - perfmon data count
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned VALUE  : 32;
    } B;
} hw_simdbg_perfmon_data_cnt_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_PERFMON_DATA_CNT register
 */
#define HW_SIMDBG_PERFMON_DATA_CNT_ADDR      (0x8003c14c)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_PERFMON_DATA_CNT           (*(volatile hw_simdbg_perfmon_data_cnt_t *) HW_SIMDBG_PERFMON_DATA_CNT_ADDR)
#define HW_SIMDBG_PERFMON_DATA_CNT_RD()      (HW_SIMDBG_PERFMON_DATA_CNT.U)
#define HW_SIMDBG_PERFMON_DATA_CNT_WR(v)     (HW_SIMDBG_PERFMON_DATA_CNT.U = (v))
#define HW_SIMDBG_PERFMON_DATA_CNT_SET(v)    (HW_SIMDBG_PERFMON_DATA_CNT_WR(HW_SIMDBG_PERFMON_DATA_CNT_RD() |  (v)))
#define HW_SIMDBG_PERFMON_DATA_CNT_CLR(v)    (HW_SIMDBG_PERFMON_DATA_CNT_WR(HW_SIMDBG_PERFMON_DATA_CNT_RD() & ~(v)))
#define HW_SIMDBG_PERFMON_DATA_CNT_TOG(v)    (HW_SIMDBG_PERFMON_DATA_CNT_WR(HW_SIMDBG_PERFMON_DATA_CNT_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_PERFMON_DATA_CNT bitfields
 */
/* --- Register HW_SIMDBG_PERFMON_DATA_CNT, field VALUE */

#define BP_SIMDBG_PERFMON_DATA_CNT_VALUE      0
#define BM_SIMDBG_PERFMON_DATA_CNT_VALUE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_PERFMON_DATA_CNT_VALUE(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_PERFMON_DATA_CNT_VALUE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_PERFMON_DATA_CNT_VALUE(v)   (HW_SIMDBG_PERFMON_DATA_CNT.B.VALUE = (v))
#endif



/*
 * HW_SIMDBG_PERFMON_MAX_LAT - perfmon maximum latency
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned VALUE  : 32;
    } B;
} hw_simdbg_perfmon_max_lat_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_PERFMON_MAX_LAT register
 */
#define HW_SIMDBG_PERFMON_MAX_LAT_ADDR      (0x8003c150)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_PERFMON_MAX_LAT           (*(volatile hw_simdbg_perfmon_max_lat_t *) HW_SIMDBG_PERFMON_MAX_LAT_ADDR)
#define HW_SIMDBG_PERFMON_MAX_LAT_RD()      (HW_SIMDBG_PERFMON_MAX_LAT.U)
#define HW_SIMDBG_PERFMON_MAX_LAT_WR(v)     (HW_SIMDBG_PERFMON_MAX_LAT.U = (v))
#define HW_SIMDBG_PERFMON_MAX_LAT_SET(v)    (HW_SIMDBG_PERFMON_MAX_LAT_WR(HW_SIMDBG_PERFMON_MAX_LAT_RD() |  (v)))
#define HW_SIMDBG_PERFMON_MAX_LAT_CLR(v)    (HW_SIMDBG_PERFMON_MAX_LAT_WR(HW_SIMDBG_PERFMON_MAX_LAT_RD() & ~(v)))
#define HW_SIMDBG_PERFMON_MAX_LAT_TOG(v)    (HW_SIMDBG_PERFMON_MAX_LAT_WR(HW_SIMDBG_PERFMON_MAX_LAT_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_PERFMON_MAX_LAT bitfields
 */
/* --- Register HW_SIMDBG_PERFMON_MAX_LAT, field VALUE */

#define BP_SIMDBG_PERFMON_MAX_LAT_VALUE      0
#define BM_SIMDBG_PERFMON_MAX_LAT_VALUE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_PERFMON_MAX_LAT_VALUE(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_PERFMON_MAX_LAT_VALUE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_PERFMON_MAX_LAT_VALUE(v)   (HW_SIMDBG_PERFMON_MAX_LAT.B.VALUE = (v))
#endif



/*
 * HW_SIMDBG_PERFMON_PRINT - perfmon print command
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned VALUE  : 32;
    } B;
} hw_simdbg_perfmon_print_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_PERFMON_PRINT register
 */
#define HW_SIMDBG_PERFMON_PRINT_ADDR      (0x8003c154)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_PERFMON_PRINT           (*(volatile hw_simdbg_perfmon_print_t *) HW_SIMDBG_PERFMON_PRINT_ADDR)
#define HW_SIMDBG_PERFMON_PRINT_RD()      (HW_SIMDBG_PERFMON_PRINT.U)
#define HW_SIMDBG_PERFMON_PRINT_WR(v)     (HW_SIMDBG_PERFMON_PRINT.U = (v))
#define HW_SIMDBG_PERFMON_PRINT_SET(v)    (HW_SIMDBG_PERFMON_PRINT_WR(HW_SIMDBG_PERFMON_PRINT_RD() |  (v)))
#define HW_SIMDBG_PERFMON_PRINT_CLR(v)    (HW_SIMDBG_PERFMON_PRINT_WR(HW_SIMDBG_PERFMON_PRINT_RD() & ~(v)))
#define HW_SIMDBG_PERFMON_PRINT_TOG(v)    (HW_SIMDBG_PERFMON_PRINT_WR(HW_SIMDBG_PERFMON_PRINT_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_PERFMON_PRINT bitfields
 */
/* --- Register HW_SIMDBG_PERFMON_PRINT, field VALUE */

#define BP_SIMDBG_PERFMON_PRINT_VALUE      0
#define BM_SIMDBG_PERFMON_PRINT_VALUE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_PERFMON_PRINT_VALUE(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_PERFMON_PRINT_VALUE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_PERFMON_PRINT_VALUE(v)   (HW_SIMDBG_PERFMON_PRINT.B.VALUE = (v))
#endif



/*
 * HW_SIMDBG_SPDIF_CTRL - spdif xactor control
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned VALUE  : 32;
    } B;
} hw_simdbg_spdif_ctrl_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_SPDIF_CTRL register
 */
#define HW_SIMDBG_SPDIF_CTRL_ADDR      (0x8003c158)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_SPDIF_CTRL           (*(volatile hw_simdbg_spdif_ctrl_t *) HW_SIMDBG_SPDIF_CTRL_ADDR)
#define HW_SIMDBG_SPDIF_CTRL_RD()      (HW_SIMDBG_SPDIF_CTRL.U)
#define HW_SIMDBG_SPDIF_CTRL_WR(v)     (HW_SIMDBG_SPDIF_CTRL.U = (v))
#define HW_SIMDBG_SPDIF_CTRL_SET(v)    (HW_SIMDBG_SPDIF_CTRL_WR(HW_SIMDBG_SPDIF_CTRL_RD() |  (v)))
#define HW_SIMDBG_SPDIF_CTRL_CLR(v)    (HW_SIMDBG_SPDIF_CTRL_WR(HW_SIMDBG_SPDIF_CTRL_RD() & ~(v)))
#define HW_SIMDBG_SPDIF_CTRL_TOG(v)    (HW_SIMDBG_SPDIF_CTRL_WR(HW_SIMDBG_SPDIF_CTRL_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_SPDIF_CTRL bitfields
 */
/* --- Register HW_SIMDBG_SPDIF_CTRL, field VALUE */

#define BP_SIMDBG_SPDIF_CTRL_VALUE      0
#define BM_SIMDBG_SPDIF_CTRL_VALUE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_SPDIF_CTRL_VALUE(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_SPDIF_CTRL_VALUE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_SPDIF_CTRL_VALUE(v)   (HW_SIMDBG_SPDIF_CTRL.B.VALUE = (v))
#endif



/*
 * HW_SIMDBG_SPDIF_CHKRESULT - spdif xactor data check results
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned VALUE  : 32;
    } B;
} hw_simdbg_spdif_chkresult_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_SPDIF_CHKRESULT register
 */
#define HW_SIMDBG_SPDIF_CHKRESULT_ADDR      (0x8003c15c)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_SPDIF_CHKRESULT           (*(volatile hw_simdbg_spdif_chkresult_t *) HW_SIMDBG_SPDIF_CHKRESULT_ADDR)
#define HW_SIMDBG_SPDIF_CHKRESULT_RD()      (HW_SIMDBG_SPDIF_CHKRESULT.U)
#define HW_SIMDBG_SPDIF_CHKRESULT_WR(v)     (HW_SIMDBG_SPDIF_CHKRESULT.U = (v))
#define HW_SIMDBG_SPDIF_CHKRESULT_SET(v)    (HW_SIMDBG_SPDIF_CHKRESULT_WR(HW_SIMDBG_SPDIF_CHKRESULT_RD() |  (v)))
#define HW_SIMDBG_SPDIF_CHKRESULT_CLR(v)    (HW_SIMDBG_SPDIF_CHKRESULT_WR(HW_SIMDBG_SPDIF_CHKRESULT_RD() & ~(v)))
#define HW_SIMDBG_SPDIF_CHKRESULT_TOG(v)    (HW_SIMDBG_SPDIF_CHKRESULT_WR(HW_SIMDBG_SPDIF_CHKRESULT_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_SPDIF_CHKRESULT bitfields
 */
/* --- Register HW_SIMDBG_SPDIF_CHKRESULT, field VALUE */

#define BP_SIMDBG_SPDIF_CHKRESULT_VALUE      0
#define BM_SIMDBG_SPDIF_CHKRESULT_VALUE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_SPDIF_CHKRESULT_VALUE(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_SPDIF_CHKRESULT_VALUE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_SPDIF_CHKRESULT_VALUE(v)   (HW_SIMDBG_SPDIF_CHKRESULT.B.VALUE = (v))
#endif



/*
 * HW_SIMDBG_CLKMON_CTRL - clkmonitor xactor control
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned VALUE  : 32;
    } B;
} hw_simdbg_clkmon_ctrl_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_CLKMON_CTRL register
 */
#define HW_SIMDBG_CLKMON_CTRL_ADDR      (0x8003c160)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_CLKMON_CTRL           (*(volatile hw_simdbg_clkmon_ctrl_t *) HW_SIMDBG_CLKMON_CTRL_ADDR)
#define HW_SIMDBG_CLKMON_CTRL_RD()      (HW_SIMDBG_CLKMON_CTRL.U)
#define HW_SIMDBG_CLKMON_CTRL_WR(v)     (HW_SIMDBG_CLKMON_CTRL.U = (v))
#define HW_SIMDBG_CLKMON_CTRL_SET(v)    (HW_SIMDBG_CLKMON_CTRL_WR(HW_SIMDBG_CLKMON_CTRL_RD() |  (v)))
#define HW_SIMDBG_CLKMON_CTRL_CLR(v)    (HW_SIMDBG_CLKMON_CTRL_WR(HW_SIMDBG_CLKMON_CTRL_RD() & ~(v)))
#define HW_SIMDBG_CLKMON_CTRL_TOG(v)    (HW_SIMDBG_CLKMON_CTRL_WR(HW_SIMDBG_CLKMON_CTRL_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_CLKMON_CTRL bitfields
 */
/* --- Register HW_SIMDBG_CLKMON_CTRL, field VALUE */

#define BP_SIMDBG_CLKMON_CTRL_VALUE      0
#define BM_SIMDBG_CLKMON_CTRL_VALUE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_CLKMON_CTRL_VALUE(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_CLKMON_CTRL_VALUE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_CLKMON_CTRL_VALUE(v)   (HW_SIMDBG_CLKMON_CTRL.B.VALUE = (v))
#endif



/*
 * HW_SIMDBG_ETM_CTRL - etm9 traceport xactor control
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned VALUE  : 32;
    } B;
} hw_simdbg_etm_ctrl_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_ETM_CTRL register
 */
#define HW_SIMDBG_ETM_CTRL_ADDR      (0x8003c164)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_ETM_CTRL           (*(volatile hw_simdbg_etm_ctrl_t *) HW_SIMDBG_ETM_CTRL_ADDR)
#define HW_SIMDBG_ETM_CTRL_RD()      (HW_SIMDBG_ETM_CTRL.U)
#define HW_SIMDBG_ETM_CTRL_WR(v)     (HW_SIMDBG_ETM_CTRL.U = (v))
#define HW_SIMDBG_ETM_CTRL_SET(v)    (HW_SIMDBG_ETM_CTRL_WR(HW_SIMDBG_ETM_CTRL_RD() |  (v)))
#define HW_SIMDBG_ETM_CTRL_CLR(v)    (HW_SIMDBG_ETM_CTRL_WR(HW_SIMDBG_ETM_CTRL_RD() & ~(v)))
#define HW_SIMDBG_ETM_CTRL_TOG(v)    (HW_SIMDBG_ETM_CTRL_WR(HW_SIMDBG_ETM_CTRL_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_ETM_CTRL bitfields
 */
/* --- Register HW_SIMDBG_ETM_CTRL, field VALUE */

#define BP_SIMDBG_ETM_CTRL_VALUE      0
#define BM_SIMDBG_ETM_CTRL_VALUE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_ETM_CTRL_VALUE(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_ETM_CTRL_VALUE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_ETM_CTRL_VALUE(v)   (HW_SIMDBG_ETM_CTRL.B.VALUE = (v))
#endif



/*
 * HW_SIMDBG_HSADC - SIMDBG Message Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned HSADC_CTRL  : 32;
    } B;
} hw_simdbg_hsadc_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_HSADC register
 */
#define HW_SIMDBG_HSADC_ADDR      (0x8003c168)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_HSADC           (*(volatile hw_simdbg_hsadc_t *) HW_SIMDBG_HSADC_ADDR)
#define HW_SIMDBG_HSADC_RD()      (HW_SIMDBG_HSADC.U)
#define HW_SIMDBG_HSADC_WR(v)     (HW_SIMDBG_HSADC.U = (v))
#define HW_SIMDBG_HSADC_SET(v)    (HW_SIMDBG_HSADC_WR(HW_SIMDBG_HSADC_RD() |  (v)))
#define HW_SIMDBG_HSADC_CLR(v)    (HW_SIMDBG_HSADC_WR(HW_SIMDBG_HSADC_RD() & ~(v)))
#define HW_SIMDBG_HSADC_TOG(v)    (HW_SIMDBG_HSADC_WR(HW_SIMDBG_HSADC_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_HSADC bitfields
 */
/* --- Register HW_SIMDBG_HSADC, field HSADC_CTRL */

#define BP_SIMDBG_HSADC_HSADC_CTRL      0
#define BM_SIMDBG_HSADC_HSADC_CTRL      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_HSADC_HSADC_CTRL(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_HSADC_HSADC_CTRL(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_HSADC_HSADC_CTRL(v)   (HW_SIMDBG_HSADC.B.HSADC_CTRL = (v))
#endif



/*
 * HW_SIMDBG_INPUT_FILENAME - SIMDBG INPUT FILENAME Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned INPUT_FILENAME  : 32;
    } B;
} hw_simdbg_input_filename_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_INPUT_FILENAME register
 */
#define HW_SIMDBG_INPUT_FILENAME_ADDR      (0x8003c1d0)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_INPUT_FILENAME           (*(volatile hw_simdbg_input_filename_t *) HW_SIMDBG_INPUT_FILENAME_ADDR)
#define HW_SIMDBG_INPUT_FILENAME_RD()      (HW_SIMDBG_INPUT_FILENAME.U)
#define HW_SIMDBG_INPUT_FILENAME_WR(v)     (HW_SIMDBG_INPUT_FILENAME.U = (v))
#define HW_SIMDBG_INPUT_FILENAME_SET(v)    (HW_SIMDBG_INPUT_FILENAME_WR(HW_SIMDBG_INPUT_FILENAME_RD() |  (v)))
#define HW_SIMDBG_INPUT_FILENAME_CLR(v)    (HW_SIMDBG_INPUT_FILENAME_WR(HW_SIMDBG_INPUT_FILENAME_RD() & ~(v)))
#define HW_SIMDBG_INPUT_FILENAME_TOG(v)    (HW_SIMDBG_INPUT_FILENAME_WR(HW_SIMDBG_INPUT_FILENAME_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_INPUT_FILENAME bitfields
 */
/* --- Register HW_SIMDBG_INPUT_FILENAME, field INPUT_FILENAME */

#define BP_SIMDBG_INPUT_FILENAME_INPUT_FILENAME      0
#define BM_SIMDBG_INPUT_FILENAME_INPUT_FILENAME      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_INPUT_FILENAME_INPUT_FILENAME(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_INPUT_FILENAME_INPUT_FILENAME(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_INPUT_FILENAME_INPUT_FILENAME(v)   (HW_SIMDBG_INPUT_FILENAME.B.INPUT_FILENAME = (v))
#endif



/*
 * HW_SIMDBG_FILE_OFFSET - SIMDBG FILE OFFSET Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned FILE_OFFSET  : 32;
    } B;
} hw_simdbg_file_offset_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_FILE_OFFSET register
 */
#define HW_SIMDBG_FILE_OFFSET_ADDR      (0x8003c1d4)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_FILE_OFFSET           (*(volatile hw_simdbg_file_offset_t *) HW_SIMDBG_FILE_OFFSET_ADDR)
#define HW_SIMDBG_FILE_OFFSET_RD()      (HW_SIMDBG_FILE_OFFSET.U)
#define HW_SIMDBG_FILE_OFFSET_WR(v)     (HW_SIMDBG_FILE_OFFSET.U = (v))
#define HW_SIMDBG_FILE_OFFSET_SET(v)    (HW_SIMDBG_FILE_OFFSET_WR(HW_SIMDBG_FILE_OFFSET_RD() |  (v)))
#define HW_SIMDBG_FILE_OFFSET_CLR(v)    (HW_SIMDBG_FILE_OFFSET_WR(HW_SIMDBG_FILE_OFFSET_RD() & ~(v)))
#define HW_SIMDBG_FILE_OFFSET_TOG(v)    (HW_SIMDBG_FILE_OFFSET_WR(HW_SIMDBG_FILE_OFFSET_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_FILE_OFFSET bitfields
 */
/* --- Register HW_SIMDBG_FILE_OFFSET, field FILE_OFFSET */

#define BP_SIMDBG_FILE_OFFSET_FILE_OFFSET      0
#define BM_SIMDBG_FILE_OFFSET_FILE_OFFSET      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_FILE_OFFSET_FILE_OFFSET(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_FILE_OFFSET_FILE_OFFSET(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_FILE_OFFSET_FILE_OFFSET(v)   (HW_SIMDBG_FILE_OFFSET.B.FILE_OFFSET = (v))
#endif



/*
 * HW_SIMDBG_OUTPUT_FILENAME - SIMDBG OUTPUT FILENAME Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned OUTPUT_FILENAME  : 32;
    } B;
} hw_simdbg_output_filename_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_OUTPUT_FILENAME register
 */
#define HW_SIMDBG_OUTPUT_FILENAME_ADDR      (0x8003c1d8)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_OUTPUT_FILENAME           (*(volatile hw_simdbg_output_filename_t *) HW_SIMDBG_OUTPUT_FILENAME_ADDR)
#define HW_SIMDBG_OUTPUT_FILENAME_RD()      (HW_SIMDBG_OUTPUT_FILENAME.U)
#define HW_SIMDBG_OUTPUT_FILENAME_WR(v)     (HW_SIMDBG_OUTPUT_FILENAME.U = (v))
#define HW_SIMDBG_OUTPUT_FILENAME_SET(v)    (HW_SIMDBG_OUTPUT_FILENAME_WR(HW_SIMDBG_OUTPUT_FILENAME_RD() |  (v)))
#define HW_SIMDBG_OUTPUT_FILENAME_CLR(v)    (HW_SIMDBG_OUTPUT_FILENAME_WR(HW_SIMDBG_OUTPUT_FILENAME_RD() & ~(v)))
#define HW_SIMDBG_OUTPUT_FILENAME_TOG(v)    (HW_SIMDBG_OUTPUT_FILENAME_WR(HW_SIMDBG_OUTPUT_FILENAME_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_OUTPUT_FILENAME bitfields
 */
/* --- Register HW_SIMDBG_OUTPUT_FILENAME, field OUTPUT_FILENAME */

#define BP_SIMDBG_OUTPUT_FILENAME_OUTPUT_FILENAME      0
#define BM_SIMDBG_OUTPUT_FILENAME_OUTPUT_FILENAME      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_OUTPUT_FILENAME_OUTPUT_FILENAME(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_OUTPUT_FILENAME_OUTPUT_FILENAME(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_OUTPUT_FILENAME_OUTPUT_FILENAME(v)   (HW_SIMDBG_OUTPUT_FILENAME.B.OUTPUT_FILENAME = (v))
#endif



/*
 * HW_SIMDBG_OUTPUT_FILE_OFFSET - SIMDBG OUTPUT FILE OFFSET Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned OUTPUT_FILE_OFFSET  : 32;
    } B;
} hw_simdbg_output_file_offset_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_OUTPUT_FILE_OFFSET register
 */
#define HW_SIMDBG_OUTPUT_FILE_OFFSET_ADDR      (0x8003c1dc)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_OUTPUT_FILE_OFFSET           (*(volatile hw_simdbg_output_file_offset_t *) HW_SIMDBG_OUTPUT_FILE_OFFSET_ADDR)
#define HW_SIMDBG_OUTPUT_FILE_OFFSET_RD()      (HW_SIMDBG_OUTPUT_FILE_OFFSET.U)
#define HW_SIMDBG_OUTPUT_FILE_OFFSET_WR(v)     (HW_SIMDBG_OUTPUT_FILE_OFFSET.U = (v))
#define HW_SIMDBG_OUTPUT_FILE_OFFSET_SET(v)    (HW_SIMDBG_OUTPUT_FILE_OFFSET_WR(HW_SIMDBG_OUTPUT_FILE_OFFSET_RD() |  (v)))
#define HW_SIMDBG_OUTPUT_FILE_OFFSET_CLR(v)    (HW_SIMDBG_OUTPUT_FILE_OFFSET_WR(HW_SIMDBG_OUTPUT_FILE_OFFSET_RD() & ~(v)))
#define HW_SIMDBG_OUTPUT_FILE_OFFSET_TOG(v)    (HW_SIMDBG_OUTPUT_FILE_OFFSET_WR(HW_SIMDBG_OUTPUT_FILE_OFFSET_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_OUTPUT_FILE_OFFSET bitfields
 */
/* --- Register HW_SIMDBG_OUTPUT_FILE_OFFSET, field OUTPUT_FILE_OFFSET */

#define BP_SIMDBG_OUTPUT_FILE_OFFSET_OUTPUT_FILE_OFFSET      0
#define BM_SIMDBG_OUTPUT_FILE_OFFSET_OUTPUT_FILE_OFFSET      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_OUTPUT_FILE_OFFSET_OUTPUT_FILE_OFFSET(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_OUTPUT_FILE_OFFSET_OUTPUT_FILE_OFFSET(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_OUTPUT_FILE_OFFSET_OUTPUT_FILE_OFFSET(v)   (HW_SIMDBG_OUTPUT_FILE_OFFSET.B.OUTPUT_FILE_OFFSET = (v))
#endif



/*
 * HW_SIMDBG_BUFFER_ID - SIMDBG Buffer ID Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned BUFFER_ID  : 32;
    } B;
} hw_simdbg_buffer_id_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_BUFFER_ID register
 */
#define HW_SIMDBG_BUFFER_ID_ADDR      (0x8003c1e0)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_BUFFER_ID           (*(volatile hw_simdbg_buffer_id_t *) HW_SIMDBG_BUFFER_ID_ADDR)
#define HW_SIMDBG_BUFFER_ID_RD()      (HW_SIMDBG_BUFFER_ID.U)
#define HW_SIMDBG_BUFFER_ID_WR(v)     (HW_SIMDBG_BUFFER_ID.U = (v))
#define HW_SIMDBG_BUFFER_ID_SET(v)    (HW_SIMDBG_BUFFER_ID_WR(HW_SIMDBG_BUFFER_ID_RD() |  (v)))
#define HW_SIMDBG_BUFFER_ID_CLR(v)    (HW_SIMDBG_BUFFER_ID_WR(HW_SIMDBG_BUFFER_ID_RD() & ~(v)))
#define HW_SIMDBG_BUFFER_ID_TOG(v)    (HW_SIMDBG_BUFFER_ID_WR(HW_SIMDBG_BUFFER_ID_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_BUFFER_ID bitfields
 */
/* --- Register HW_SIMDBG_BUFFER_ID, field BUFFER_ID */

#define BP_SIMDBG_BUFFER_ID_BUFFER_ID      0
#define BM_SIMDBG_BUFFER_ID_BUFFER_ID      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_BUFFER_ID_BUFFER_ID(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_BUFFER_ID_BUFFER_ID(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_BUFFER_ID_BUFFER_ID(v)   (HW_SIMDBG_BUFFER_ID.B.BUFFER_ID = (v))
#endif



/*
 * HW_SIMDBG_BUFFER_POINTER - SIMDBG Buffer Base Pointer Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned BUFFER_SIZE  : 32;
    } B;
} hw_simdbg_buffer_pointer_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_BUFFER_POINTER register
 */
#define HW_SIMDBG_BUFFER_POINTER_ADDR      (0x8003c1e4)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_BUFFER_POINTER           (*(volatile hw_simdbg_buffer_pointer_t *) HW_SIMDBG_BUFFER_POINTER_ADDR)
#define HW_SIMDBG_BUFFER_POINTER_RD()      (HW_SIMDBG_BUFFER_POINTER.U)
#define HW_SIMDBG_BUFFER_POINTER_WR(v)     (HW_SIMDBG_BUFFER_POINTER.U = (v))
#define HW_SIMDBG_BUFFER_POINTER_SET(v)    (HW_SIMDBG_BUFFER_POINTER_WR(HW_SIMDBG_BUFFER_POINTER_RD() |  (v)))
#define HW_SIMDBG_BUFFER_POINTER_CLR(v)    (HW_SIMDBG_BUFFER_POINTER_WR(HW_SIMDBG_BUFFER_POINTER_RD() & ~(v)))
#define HW_SIMDBG_BUFFER_POINTER_TOG(v)    (HW_SIMDBG_BUFFER_POINTER_WR(HW_SIMDBG_BUFFER_POINTER_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_BUFFER_POINTER bitfields
 */
/* --- Register HW_SIMDBG_BUFFER_POINTER, field BUFFER_SIZE */

#define BP_SIMDBG_BUFFER_POINTER_BUFFER_SIZE      0
#define BM_SIMDBG_BUFFER_POINTER_BUFFER_SIZE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_BUFFER_POINTER_BUFFER_SIZE(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_BUFFER_POINTER_BUFFER_SIZE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_BUFFER_POINTER_BUFFER_SIZE(v)   (HW_SIMDBG_BUFFER_POINTER.B.BUFFER_SIZE = (v))
#endif



/*
 * HW_SIMDBG_BUFFER_SIZE - SIMDBG Buffer Size Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned BUFFER_SIZE  : 32;
    } B;
} hw_simdbg_buffer_size_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_BUFFER_SIZE register
 */
#define HW_SIMDBG_BUFFER_SIZE_ADDR      (0x8003c1e8)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_BUFFER_SIZE           (*(volatile hw_simdbg_buffer_size_t *) HW_SIMDBG_BUFFER_SIZE_ADDR)
#define HW_SIMDBG_BUFFER_SIZE_RD()      (HW_SIMDBG_BUFFER_SIZE.U)
#define HW_SIMDBG_BUFFER_SIZE_WR(v)     (HW_SIMDBG_BUFFER_SIZE.U = (v))
#define HW_SIMDBG_BUFFER_SIZE_SET(v)    (HW_SIMDBG_BUFFER_SIZE_WR(HW_SIMDBG_BUFFER_SIZE_RD() |  (v)))
#define HW_SIMDBG_BUFFER_SIZE_CLR(v)    (HW_SIMDBG_BUFFER_SIZE_WR(HW_SIMDBG_BUFFER_SIZE_RD() & ~(v)))
#define HW_SIMDBG_BUFFER_SIZE_TOG(v)    (HW_SIMDBG_BUFFER_SIZE_WR(HW_SIMDBG_BUFFER_SIZE_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_BUFFER_SIZE bitfields
 */
/* --- Register HW_SIMDBG_BUFFER_SIZE, field BUFFER_SIZE */

#define BP_SIMDBG_BUFFER_SIZE_BUFFER_SIZE      0
#define BM_SIMDBG_BUFFER_SIZE_BUFFER_SIZE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_BUFFER_SIZE_BUFFER_SIZE(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_BUFFER_SIZE_BUFFER_SIZE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_BUFFER_SIZE_BUFFER_SIZE(v)   (HW_SIMDBG_BUFFER_SIZE.B.BUFFER_SIZE = (v))
#endif



/*
 * HW_SIMDBG_BUFFER_OPERATION - SIMDBG Buffer Operation Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned BUFFER_OPERATION  : 32;
    } B;
} hw_simdbg_buffer_operation_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_BUFFER_OPERATION register
 */
#define HW_SIMDBG_BUFFER_OPERATION_ADDR      (0x8003c1ec)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_BUFFER_OPERATION           (*(volatile hw_simdbg_buffer_operation_t *) HW_SIMDBG_BUFFER_OPERATION_ADDR)
#define HW_SIMDBG_BUFFER_OPERATION_RD()      (HW_SIMDBG_BUFFER_OPERATION.U)
#define HW_SIMDBG_BUFFER_OPERATION_WR(v)     (HW_SIMDBG_BUFFER_OPERATION.U = (v))
#define HW_SIMDBG_BUFFER_OPERATION_SET(v)    (HW_SIMDBG_BUFFER_OPERATION_WR(HW_SIMDBG_BUFFER_OPERATION_RD() |  (v)))
#define HW_SIMDBG_BUFFER_OPERATION_CLR(v)    (HW_SIMDBG_BUFFER_OPERATION_WR(HW_SIMDBG_BUFFER_OPERATION_RD() & ~(v)))
#define HW_SIMDBG_BUFFER_OPERATION_TOG(v)    (HW_SIMDBG_BUFFER_OPERATION_WR(HW_SIMDBG_BUFFER_OPERATION_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_BUFFER_OPERATION bitfields
 */
/* --- Register HW_SIMDBG_BUFFER_OPERATION, field BUFFER_OPERATION */

#define BP_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION      0
#define BM_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION(v)   (HW_SIMDBG_BUFFER_OPERATION.B.BUFFER_OPERATION = (v))
#endif

#define BV_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION__BUFFER_OPEN_READ             0x00000000
#define BV_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION__BUFFER_OPEN_WRITE            0x00000001
#define BV_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION__BUFFER_CLOSE_READ            0x00000002
#define BV_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION__BUFFER_CLOSE_WRITE           0x00000003
#define BV_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION__BUFFER_VALIDATE              0x00000004
#define BV_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION__BUFFER_INVALIDATE            0x00000005
#define BV_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION__BUFFER_INIT_ALL_0            0x00000010
#define BV_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION__BUFFER_INIT_ALL_1            0x00000011
#define BV_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION__BUFFER_INIT_INDEX            0x00000012
#define BV_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION__BUFFER_CHECK_ALL_0           0x00000020
#define BV_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION__BUFFER_CHECK_ALL_1           0x00000021
#define BV_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION__BUFFER_CHECK_INDEX           0x00000022
#define BV_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION__BUFFER_CHECK_INDEX_M         0x00000023
#define BV_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION__BUFFER_CHECK_BUFFER_FILE     0x00000024
#define BV_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION__BUFFER_CHECK_INFILE_OUTFILE  0x00000025
#define BV_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION__BUFFER_DUMP                  0x00000030
#define BV_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION__DATA_FLOW_INIT               0x00000040
#define BV_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION__DATA_FLOW_ENABLE             0x00000041
#define BV_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION__DATA_FLOW_DISABLE            0x00000042
#define BV_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION__DATA_FLOW_SERVICE            0x00000043
#define BV_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION__DATA_FLOW_COUNT              0x00000044
#define BV_SIMDBG_BUFFER_OPERATION_BUFFER_OPERATION__RSRVD                        Not_Listed



/*
 * HW_SIMDBG_MESSAGE_PARA_0 - SIMDBG Message Parameter Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned MESSAGE_PARA  : 32;
    } B;
} hw_simdbg_message_para_0_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_MESSAGE_PARA_0 register
 */
#define HW_SIMDBG_MESSAGE_PARA_0_ADDR      (0x8003c1f0)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_MESSAGE_PARA_0           (*(volatile hw_simdbg_message_para_0_t *) HW_SIMDBG_MESSAGE_PARA_0_ADDR)
#define HW_SIMDBG_MESSAGE_PARA_0_RD()      (HW_SIMDBG_MESSAGE_PARA_0.U)
#define HW_SIMDBG_MESSAGE_PARA_0_WR(v)     (HW_SIMDBG_MESSAGE_PARA_0.U = (v))
#define HW_SIMDBG_MESSAGE_PARA_0_SET(v)    (HW_SIMDBG_MESSAGE_PARA_0_WR(HW_SIMDBG_MESSAGE_PARA_0_RD() |  (v)))
#define HW_SIMDBG_MESSAGE_PARA_0_CLR(v)    (HW_SIMDBG_MESSAGE_PARA_0_WR(HW_SIMDBG_MESSAGE_PARA_0_RD() & ~(v)))
#define HW_SIMDBG_MESSAGE_PARA_0_TOG(v)    (HW_SIMDBG_MESSAGE_PARA_0_WR(HW_SIMDBG_MESSAGE_PARA_0_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_MESSAGE_PARA_0 bitfields
 */
/* --- Register HW_SIMDBG_MESSAGE_PARA_0, field MESSAGE_PARA */

#define BP_SIMDBG_MESSAGE_PARA_0_MESSAGE_PARA      0
#define BM_SIMDBG_MESSAGE_PARA_0_MESSAGE_PARA      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_MESSAGE_PARA_0_MESSAGE_PARA(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_MESSAGE_PARA_0_MESSAGE_PARA(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_MESSAGE_PARA_0_MESSAGE_PARA(v)   (HW_SIMDBG_MESSAGE_PARA_0.B.MESSAGE_PARA = (v))
#endif



/*
 * HW_SIMDBG_MESSAGE_PARA_1 - SIMDBG Message Parameter Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned MESSAGE_PARA  : 32;
    } B;
} hw_simdbg_message_para_1_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_MESSAGE_PARA_1 register
 */
#define HW_SIMDBG_MESSAGE_PARA_1_ADDR      (0x8003c1f4)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_MESSAGE_PARA_1           (*(volatile hw_simdbg_message_para_1_t *) HW_SIMDBG_MESSAGE_PARA_1_ADDR)
#define HW_SIMDBG_MESSAGE_PARA_1_RD()      (HW_SIMDBG_MESSAGE_PARA_1.U)
#define HW_SIMDBG_MESSAGE_PARA_1_WR(v)     (HW_SIMDBG_MESSAGE_PARA_1.U = (v))
#define HW_SIMDBG_MESSAGE_PARA_1_SET(v)    (HW_SIMDBG_MESSAGE_PARA_1_WR(HW_SIMDBG_MESSAGE_PARA_1_RD() |  (v)))
#define HW_SIMDBG_MESSAGE_PARA_1_CLR(v)    (HW_SIMDBG_MESSAGE_PARA_1_WR(HW_SIMDBG_MESSAGE_PARA_1_RD() & ~(v)))
#define HW_SIMDBG_MESSAGE_PARA_1_TOG(v)    (HW_SIMDBG_MESSAGE_PARA_1_WR(HW_SIMDBG_MESSAGE_PARA_1_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_MESSAGE_PARA_1 bitfields
 */
/* --- Register HW_SIMDBG_MESSAGE_PARA_1, field MESSAGE_PARA */

#define BP_SIMDBG_MESSAGE_PARA_1_MESSAGE_PARA      0
#define BM_SIMDBG_MESSAGE_PARA_1_MESSAGE_PARA      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_MESSAGE_PARA_1_MESSAGE_PARA(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_MESSAGE_PARA_1_MESSAGE_PARA(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_MESSAGE_PARA_1_MESSAGE_PARA(v)   (HW_SIMDBG_MESSAGE_PARA_1.B.MESSAGE_PARA = (v))
#endif



/*
 * HW_SIMDBG_MESSAGE - SIMDBG Message Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned MESSAGE_ID  : 32;
    } B;
} hw_simdbg_message_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_MESSAGE register
 */
#define HW_SIMDBG_MESSAGE_ADDR      (0x8003c1f8)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_MESSAGE           (*(volatile hw_simdbg_message_t *) HW_SIMDBG_MESSAGE_ADDR)
#define HW_SIMDBG_MESSAGE_RD()      (HW_SIMDBG_MESSAGE.U)
#define HW_SIMDBG_MESSAGE_WR(v)     (HW_SIMDBG_MESSAGE.U = (v))
#define HW_SIMDBG_MESSAGE_SET(v)    (HW_SIMDBG_MESSAGE_WR(HW_SIMDBG_MESSAGE_RD() |  (v)))
#define HW_SIMDBG_MESSAGE_CLR(v)    (HW_SIMDBG_MESSAGE_WR(HW_SIMDBG_MESSAGE_RD() & ~(v)))
#define HW_SIMDBG_MESSAGE_TOG(v)    (HW_SIMDBG_MESSAGE_WR(HW_SIMDBG_MESSAGE_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_MESSAGE bitfields
 */
/* --- Register HW_SIMDBG_MESSAGE, field MESSAGE_ID */

#define BP_SIMDBG_MESSAGE_MESSAGE_ID      0
#define BM_SIMDBG_MESSAGE_MESSAGE_ID      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_MESSAGE_MESSAGE_ID(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_MESSAGE_MESSAGE_ID(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_MESSAGE_MESSAGE_ID(v)   (HW_SIMDBG_MESSAGE.B.MESSAGE_ID = (v))
#endif

#define BV_SIMDBG_MESSAGE_MESSAGE_ID__RESET             0x00000001
#define BV_SIMDBG_MESSAGE_MESSAGE_ID__CPU_LOADING       0x00000002
#define BV_SIMDBG_MESSAGE_MESSAGE_ID__SYSTEM_TIME       0x00000003
#define BV_SIMDBG_MESSAGE_MESSAGE_ID__SYSTEM_INIT       0x00000004
#define BV_SIMDBG_MESSAGE_MESSAGE_ID__SYSTEM_START      0x00000005
#define BV_SIMDBG_MESSAGE_MESSAGE_ID__CPU_MONITOR_INIT  0x00000006
#define BV_SIMDBG_MESSAGE_MESSAGE_ID__RSRVD             Not Listed



/*
 * HW_SIMDBG_REG_TEMPLATE - SIMDBG Register Template
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned REG_TEMPLATE  : 32;
    } B;
} hw_simdbg_reg_template_t;
#endif

/*
 * constants & macros for entire HW_SIMDBG_REG_TEMPLATE register
 */
#define HW_SIMDBG_REG_TEMPLATE_ADDR      (0x8003c1fc)

#ifndef __LANGUAGE_ASM__
#define HW_SIMDBG_REG_TEMPLATE           (*(volatile hw_simdbg_reg_template_t *) HW_SIMDBG_REG_TEMPLATE_ADDR)
#define HW_SIMDBG_REG_TEMPLATE_RD()      (HW_SIMDBG_REG_TEMPLATE.U)
#define HW_SIMDBG_REG_TEMPLATE_WR(v)     (HW_SIMDBG_REG_TEMPLATE.U = (v))
#define HW_SIMDBG_REG_TEMPLATE_SET(v)    (HW_SIMDBG_REG_TEMPLATE_WR(HW_SIMDBG_REG_TEMPLATE_RD() |  (v)))
#define HW_SIMDBG_REG_TEMPLATE_CLR(v)    (HW_SIMDBG_REG_TEMPLATE_WR(HW_SIMDBG_REG_TEMPLATE_RD() & ~(v)))
#define HW_SIMDBG_REG_TEMPLATE_TOG(v)    (HW_SIMDBG_REG_TEMPLATE_WR(HW_SIMDBG_REG_TEMPLATE_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMDBG_REG_TEMPLATE bitfields
 */
/* --- Register HW_SIMDBG_REG_TEMPLATE, field REG_TEMPLATE */

#define BP_SIMDBG_REG_TEMPLATE_REG_TEMPLATE      0
#define BM_SIMDBG_REG_TEMPLATE_REG_TEMPLATE      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_SIMDBG_REG_TEMPLATE_REG_TEMPLATE(v)   ((reg32_t) v)
#else
#define BF_SIMDBG_REG_TEMPLATE_REG_TEMPLATE(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_SIMDBG_REG_TEMPLATE_REG_TEMPLATE(v)   (HW_SIMDBG_REG_TEMPLATE.B.REG_TEMPLATE = (v))
#endif


#endif /* _SIMDBG_H */

////////////////////////////////////////////////////////////////////////////////
