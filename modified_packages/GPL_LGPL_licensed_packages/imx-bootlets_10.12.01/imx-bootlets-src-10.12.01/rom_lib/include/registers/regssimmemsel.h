/*
 *
 * Filename: ./regssimmemsel.h
 *
 * Description: PIO Registers for SIMMEMSEL interface
 *
 * Xml Revision: 1.0
 *
 * Template revision: 20911
 *
 *
 *
 * Copyright (C) Freescale Semiconductor Unpublished
 *
 * Freescale Semiconductor
 * Proprietary & Confidential
 *
 * This source code and the algorithms implemented therein constitute
 * confidential information and may compromise trade secrets of SigmaTel, Inc.
 * or its associates, and any unauthorized use thereof is prohibited.
 *
 *
 *
 * WARNING!  THIS FILE IS AUTOMATICALLY GENERATED FROM XML.
 *                DO NOT MODIFY THIS FILE DIRECTLY.
 *
 *
 *
 * The following naming conventions are followed in this file.
 *      XX_<module>_<regname>_<field>
 *
 * XX specifies the define / macro class
 *      HW pertains to a register
 *      BM indicates a Bit Mask
 *      BF indicates a Bit Field macro
 *
 * <module> is the hardware module name which can be any of the following...
 *      USB20 (Note when there is more than one copy of a given module, the
 *      module name includes a number starting from 0 for the first instance
 *      of that module)
 *
 * <regname> is the specific register within that module
 *
 * <field> is the specific bitfield within that <module>_<register>
 *
 * We also define the following...
 *      hw_<module>_<regname>_t is typedef of anonymous union
 *
 */

#ifndef _SIMMEMSEL_H
#define _SIMMEMSEL_H  1

#include "regs.h"

#ifndef REGS_SIMMEMSEL_BASE
#define REGS_SIMMEMSEL_BASE (REGS_BASE + 0x3c400)
#endif

/*
 * HW_SIMMEMSEL_CFG - SIMMEMSEL configuration register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned DEV_CODE   :  8;
        unsigned DEV_CLASS  :  4;
        unsigned RSVD0      :  4;
        unsigned CE_MAP     :  4;
        unsigned RSVD1      : 12;
    } B;
} hw_simmemsel_cfg_t;
#endif

/*
 * constants & macros for entire HW_SIMMEMSEL_CFG register
 */
#define HW_SIMMEMSEL_CFG_ADDR      (0x8003c400)

#ifndef __LANGUAGE_ASM__
#define HW_SIMMEMSEL_CFG           (*(volatile hw_simmemsel_cfg_t *) HW_SIMMEMSEL_CFG_ADDR)
#define HW_SIMMEMSEL_CFG_RD()      (HW_SIMMEMSEL_CFG.U)
#define HW_SIMMEMSEL_CFG_WR(v)     (HW_SIMMEMSEL_CFG.U = (v))
#define HW_SIMMEMSEL_CFG_SET(v)    (HW_SIMMEMSEL_CFG_WR(HW_SIMMEMSEL_CFG_RD() |  (v)))
#define HW_SIMMEMSEL_CFG_CLR(v)    (HW_SIMMEMSEL_CFG_WR(HW_SIMMEMSEL_CFG_RD() & ~(v)))
#define HW_SIMMEMSEL_CFG_TOG(v)    (HW_SIMMEMSEL_CFG_WR(HW_SIMMEMSEL_CFG_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMMEMSEL_CFG bitfields
 */
/* --- Register HW_SIMMEMSEL_CFG, field CE_MAP */

#define BP_SIMMEMSEL_CFG_CE_MAP      16
#define BM_SIMMEMSEL_CFG_CE_MAP      0x000F0000

#define BF_SIMMEMSEL_CFG_CE_MAP(v)   (((v) << 16) & BM_SIMMEMSEL_CFG_CE_MAP)
#ifndef __LANGUAGE_ASM__
#define BW_SIMMEMSEL_CFG_CE_MAP(v)   BF_CS1(SIMMEMSEL_CFG, CE_MAP, v)
#endif

/* --- Register HW_SIMMEMSEL_CFG, field DEV_CLASS */

#define BP_SIMMEMSEL_CFG_DEV_CLASS      8
#define BM_SIMMEMSEL_CFG_DEV_CLASS      0x00000F00

#define BF_SIMMEMSEL_CFG_DEV_CLASS(v)   (((v) << 8) & BM_SIMMEMSEL_CFG_DEV_CLASS)
#ifndef __LANGUAGE_ASM__
#define BW_SIMMEMSEL_CFG_DEV_CLASS(v)   BF_CS1(SIMMEMSEL_CFG, DEV_CLASS, v)
#endif

#define BV_SIMMEMSEL_CFG_DEV_CLASS__RSRVD    0x0
#define BV_SIMMEMSEL_CFG_DEV_CLASS__MDDR_32  0x1
#define BV_SIMMEMSEL_CFG_DEV_CLASS__MDDR_16  0x2
#define BV_SIMMEMSEL_CFG_DEV_CLASS__DDR2_32  0x3
#define BV_SIMMEMSEL_CFG_DEV_CLASS__DDR2_16  0x4

/* --- Register HW_SIMMEMSEL_CFG, field DEV_CODE */

#define BP_SIMMEMSEL_CFG_DEV_CODE      0
#define BM_SIMMEMSEL_CFG_DEV_CODE      0x000000FF

#define BF_SIMMEMSEL_CFG_DEV_CODE(v)   (((v) << 0) & BM_SIMMEMSEL_CFG_DEV_CODE)
#ifndef __LANGUAGE_ASM__
#define BW_SIMMEMSEL_CFG_DEV_CODE(v)   (HW_SIMMEMSEL_CFG.B.DEV_CODE = (v))
#endif

#define BV_SIMMEMSEL_CFG_DEV_CODE__RSRVD                            0x0
#define BV_SIMMEMSEL_CFG_DEV_CODE__MDDR_16_MT46H16M16LF_6           0x1
#define BV_SIMMEMSEL_CFG_DEV_CODE__MDDR_16_MT46H8M16_75             0x2
#define BV_SIMMEMSEL_CFG_DEV_CODE__MDDR_16_MT46H16M16LF_75          0x3
#define BV_SIMMEMSEL_CFG_DEV_CODE__MDDR_16_MT46H32M16LF_5           0x4
#define BV_SIMMEMSEL_CFG_DEV_CODE__MDDR_32_MT46H8M32LF_6            0x1
#define BV_SIMMEMSEL_CFG_DEV_CODE__MDDR_32_MT46H8M32LF_75           0x2
#define BV_SIMMEMSEL_CFG_DEV_CODE__MDDR_32_MT46H16M32LF_5           0x3
#define BV_SIMMEMSEL_CFG_DEV_CODE__DDR2_16_MT47H128M16_3            0x1
#define BV_SIMMEMSEL_CFG_DEV_CODE__DDR2_16_MT47H16M16_3             0x2
#define BV_SIMMEMSEL_CFG_DEV_CODE__DDR2_16_JEDEC_4G_X16_400_CL4     0x3
#define BV_SIMMEMSEL_CFG_DEV_CODE__DDR2_16_MT47H128M16_3_32         0x1
#define BV_SIMMEMSEL_CFG_DEV_CODE__DDR2_16_MT47H16M16_3_32          0x2
#define BV_SIMMEMSEL_CFG_DEV_CODE__DDR2_16_JEDEC_4G_X16_400_CL4_32  0x3



/*
 * HW_SIMMEMSEL_CE_CFG - SIMMEMSEL CE Source Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned CE0_SRC  :  4;
        unsigned CE1_SRC  :  4;
        unsigned CE2_SRC  :  4;
        unsigned CE3_SRC  :  4;
        unsigned RSVD0    : 16;
    } B;
} hw_simmemsel_ce_cfg_t;
#endif

/*
 * constants & macros for entire HW_SIMMEMSEL_CE_CFG register
 */
#define HW_SIMMEMSEL_CE_CFG_ADDR      (0x8003c404)

#ifndef __LANGUAGE_ASM__
#define HW_SIMMEMSEL_CE_CFG           (*(volatile hw_simmemsel_ce_cfg_t *) HW_SIMMEMSEL_CE_CFG_ADDR)
#define HW_SIMMEMSEL_CE_CFG_RD()      (HW_SIMMEMSEL_CE_CFG.U)
#define HW_SIMMEMSEL_CE_CFG_WR(v)     (HW_SIMMEMSEL_CE_CFG.U = (v))
#define HW_SIMMEMSEL_CE_CFG_SET(v)    (HW_SIMMEMSEL_CE_CFG_WR(HW_SIMMEMSEL_CE_CFG_RD() |  (v)))
#define HW_SIMMEMSEL_CE_CFG_CLR(v)    (HW_SIMMEMSEL_CE_CFG_WR(HW_SIMMEMSEL_CE_CFG_RD() & ~(v)))
#define HW_SIMMEMSEL_CE_CFG_TOG(v)    (HW_SIMMEMSEL_CE_CFG_WR(HW_SIMMEMSEL_CE_CFG_RD() ^  (v)))
#endif


/*
 * constants & macros for individual HW_SIMMEMSEL_CE_CFG bitfields
 */
/* --- Register HW_SIMMEMSEL_CE_CFG, field CE3_SRC */

#define BP_SIMMEMSEL_CE_CFG_CE3_SRC      12
#define BM_SIMMEMSEL_CE_CFG_CE3_SRC      0x0000F000

#define BF_SIMMEMSEL_CE_CFG_CE3_SRC(v)   (((v) << 12) & BM_SIMMEMSEL_CE_CFG_CE3_SRC)
#ifndef __LANGUAGE_ASM__
#define BW_SIMMEMSEL_CE_CFG_CE3_SRC(v)   BF_CS1(SIMMEMSEL_CE_CFG, CE3_SRC, v)
#endif

#define BV_SIMMEMSEL_CE_CFG_CE3_SRC__PRIMARY  0x0

/* --- Register HW_SIMMEMSEL_CE_CFG, field CE2_SRC */

#define BP_SIMMEMSEL_CE_CFG_CE2_SRC      8
#define BM_SIMMEMSEL_CE_CFG_CE2_SRC      0x00000F00

#define BF_SIMMEMSEL_CE_CFG_CE2_SRC(v)   (((v) << 8) & BM_SIMMEMSEL_CE_CFG_CE2_SRC)
#ifndef __LANGUAGE_ASM__
#define BW_SIMMEMSEL_CE_CFG_CE2_SRC(v)   BF_CS1(SIMMEMSEL_CE_CFG, CE2_SRC, v)
#endif

#define BV_SIMMEMSEL_CE_CFG_CE2_SRC__PRIMARY  0x0

/* --- Register HW_SIMMEMSEL_CE_CFG, field CE1_SRC */

#define BP_SIMMEMSEL_CE_CFG_CE1_SRC      4
#define BM_SIMMEMSEL_CE_CFG_CE1_SRC      0x000000F0

#define BF_SIMMEMSEL_CE_CFG_CE1_SRC(v)   (((v) << 4) & BM_SIMMEMSEL_CE_CFG_CE1_SRC)
#ifndef __LANGUAGE_ASM__
#define BW_SIMMEMSEL_CE_CFG_CE1_SRC(v)   BF_CS1(SIMMEMSEL_CE_CFG, CE1_SRC, v)
#endif

#define BV_SIMMEMSEL_CE_CFG_CE1_SRC__PRIMARY  0x0

/* --- Register HW_SIMMEMSEL_CE_CFG, field CE0_SRC */

#define BP_SIMMEMSEL_CE_CFG_CE0_SRC      0
#define BM_SIMMEMSEL_CE_CFG_CE0_SRC      0x0000000F

#define BF_SIMMEMSEL_CE_CFG_CE0_SRC(v)   (((v) << 0) & BM_SIMMEMSEL_CE_CFG_CE0_SRC)
#ifndef __LANGUAGE_ASM__
#define BW_SIMMEMSEL_CE_CFG_CE0_SRC(v)   BF_CS1(SIMMEMSEL_CE_CFG, CE0_SRC, v)
#endif

#define BV_SIMMEMSEL_CE_CFG_CE0_SRC__PRIMARY  0x0


#endif /* _SIMMEMSEL_H */

////////////////////////////////////////////////////////////////////////////////
