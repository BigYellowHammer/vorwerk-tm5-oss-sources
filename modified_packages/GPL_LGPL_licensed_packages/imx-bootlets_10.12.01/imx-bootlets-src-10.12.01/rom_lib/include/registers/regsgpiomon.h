/*
 *
 * Filename: ./regsgpiomon.h
 *
 * Description: PIO Registers for GPIOMON interface
 *
 * Xml Revision: 1.2
 *
 * Template revision: 20911
 *
 *
 *
 * Copyright (C) Freescale Semiconductor Unpublished
 *
 * Freescale Semiconductor
 * Proprietary & Confidential
 *
 * This source code and the algorithms implemented therein constitute
 * confidential information and may compromise trade secrets of SigmaTel, Inc.
 * or its associates, and any unauthorized use thereof is prohibited.
 *
 *
 *
 * WARNING!  THIS FILE IS AUTOMATICALLY GENERATED FROM XML.
 *                DO NOT MODIFY THIS FILE DIRECTLY.
 *
 *
 *
 * The following naming conventions are followed in this file.
 *      XX_<module>_<regname>_<field>
 *
 * XX specifies the define / macro class
 *      HW pertains to a register
 *      BM indicates a Bit Mask
 *      BF indicates a Bit Field macro
 *
 * <module> is the hardware module name which can be any of the following...
 *      USB20 (Note when there is more than one copy of a given module, the
 *      module name includes a number starting from 0 for the first instance
 *      of that module)
 *
 * <regname> is the specific register within that module
 *
 * <field> is the specific bitfield within that <module>_<register>
 *
 * We also define the following...
 *      hw_<module>_<regname>_t is typedef of anonymous union
 *
 */

#ifndef _GPIOMON_H
#define _GPIOMON_H  1

#include "regs.h"

#ifndef REGS_GPIOMON_BASE
#define REGS_GPIOMON_BASE (REGS_BASE + 0x3c500L)
#endif

/*
 * HW_GPIOMON_CTRL - GPIO Monitor Enable Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned ENABLE_BANK_0  :  1;
        unsigned ENABLE_BANK_1  :  1;
        unsigned ENABLE_BANK_2  :  1;
        unsigned ENABLE_BANK_3  :  1;
        unsigned ENABLE_BANK_4  :  1;
        unsigned ENABLE_BANK_5  :  1;
        unsigned ENABLE_BANK_6  :  1;
        unsigned ENABLE_BANK_7  :  1;
        unsigned RSRVD1         : 24;
    } B;
} hw_gpiomon_ctrl_t;
#endif

/*
 * constants & macros for entire HW_GPIOMON_CTRL register
 */
#define HW_GPIOMON_CTRL_ADDR      (0x8003c500)
#define HW_GPIOMON_CTRL_SET_ADDR  (0x8003c504)
#define HW_GPIOMON_CTRL_CLR_ADDR  (0x8003c508)
#define HW_GPIOMON_CTRL_TOG_ADDR  (0x8003c50c)

#ifndef __LANGUAGE_ASM__
#define HW_GPIOMON_CTRL           (*(volatile hw_gpiomon_ctrl_t *) HW_GPIOMON_CTRL_ADDR)
#define HW_GPIOMON_CTRL_RD()      (HW_GPIOMON_CTRL.U)
#define HW_GPIOMON_CTRL_WR(v)     (HW_GPIOMON_CTRL.U = (v))
#define HW_GPIOMON_CTRL_SET(v)    ((*(volatile reg32_t *) HW_GPIOMON_CTRL_SET_ADDR) = (v))
#define HW_GPIOMON_CTRL_CLR(v)    ((*(volatile reg32_t *) HW_GPIOMON_CTRL_CLR_ADDR) = (v))
#define HW_GPIOMON_CTRL_TOG(v)    ((*(volatile reg32_t *) HW_GPIOMON_CTRL_TOG_ADDR) = (v))
#endif


/*
 * constants & macros for individual HW_GPIOMON_CTRL bitfields
 */
/* --- Register HW_GPIOMON_CTRL, field ENABLE_BANK_7 */

#define BP_GPIOMON_CTRL_ENABLE_BANK_7      7
#define BM_GPIOMON_CTRL_ENABLE_BANK_7      0x00000080

#define BF_GPIOMON_CTRL_ENABLE_BANK_7(v)   (((v) << 7) & BM_GPIOMON_CTRL_ENABLE_BANK_7)
#ifndef __LANGUAGE_ASM__
#define BW_GPIOMON_CTRL_ENABLE_BANK_7(v)   BF_CS1(GPIOMON_CTRL, ENABLE_BANK_7, v)
#endif

/* --- Register HW_GPIOMON_CTRL, field ENABLE_BANK_6 */

#define BP_GPIOMON_CTRL_ENABLE_BANK_6      6
#define BM_GPIOMON_CTRL_ENABLE_BANK_6      0x00000040

#define BF_GPIOMON_CTRL_ENABLE_BANK_6(v)   (((v) << 6) & BM_GPIOMON_CTRL_ENABLE_BANK_6)
#ifndef __LANGUAGE_ASM__
#define BW_GPIOMON_CTRL_ENABLE_BANK_6(v)   BF_CS1(GPIOMON_CTRL, ENABLE_BANK_6, v)
#endif

/* --- Register HW_GPIOMON_CTRL, field ENABLE_BANK_5 */

#define BP_GPIOMON_CTRL_ENABLE_BANK_5      5
#define BM_GPIOMON_CTRL_ENABLE_BANK_5      0x00000020

#define BF_GPIOMON_CTRL_ENABLE_BANK_5(v)   (((v) << 5) & BM_GPIOMON_CTRL_ENABLE_BANK_5)
#ifndef __LANGUAGE_ASM__
#define BW_GPIOMON_CTRL_ENABLE_BANK_5(v)   BF_CS1(GPIOMON_CTRL, ENABLE_BANK_5, v)
#endif

/* --- Register HW_GPIOMON_CTRL, field ENABLE_BANK_4 */

#define BP_GPIOMON_CTRL_ENABLE_BANK_4      4
#define BM_GPIOMON_CTRL_ENABLE_BANK_4      0x00000010

#define BF_GPIOMON_CTRL_ENABLE_BANK_4(v)   (((v) << 4) & BM_GPIOMON_CTRL_ENABLE_BANK_4)
#ifndef __LANGUAGE_ASM__
#define BW_GPIOMON_CTRL_ENABLE_BANK_4(v)   BF_CS1(GPIOMON_CTRL, ENABLE_BANK_4, v)
#endif

/* --- Register HW_GPIOMON_CTRL, field ENABLE_BANK_3 */

#define BP_GPIOMON_CTRL_ENABLE_BANK_3      3
#define BM_GPIOMON_CTRL_ENABLE_BANK_3      0x00000008

#define BF_GPIOMON_CTRL_ENABLE_BANK_3(v)   (((v) << 3) & BM_GPIOMON_CTRL_ENABLE_BANK_3)
#ifndef __LANGUAGE_ASM__
#define BW_GPIOMON_CTRL_ENABLE_BANK_3(v)   BF_CS1(GPIOMON_CTRL, ENABLE_BANK_3, v)
#endif

/* --- Register HW_GPIOMON_CTRL, field ENABLE_BANK_2 */

#define BP_GPIOMON_CTRL_ENABLE_BANK_2      2
#define BM_GPIOMON_CTRL_ENABLE_BANK_2      0x00000004

#define BF_GPIOMON_CTRL_ENABLE_BANK_2(v)   (((v) << 2) & BM_GPIOMON_CTRL_ENABLE_BANK_2)
#ifndef __LANGUAGE_ASM__
#define BW_GPIOMON_CTRL_ENABLE_BANK_2(v)   BF_CS1(GPIOMON_CTRL, ENABLE_BANK_2, v)
#endif

/* --- Register HW_GPIOMON_CTRL, field ENABLE_BANK_1 */

#define BP_GPIOMON_CTRL_ENABLE_BANK_1      1
#define BM_GPIOMON_CTRL_ENABLE_BANK_1      0x00000002

#define BF_GPIOMON_CTRL_ENABLE_BANK_1(v)   (((v) << 1) & BM_GPIOMON_CTRL_ENABLE_BANK_1)
#ifndef __LANGUAGE_ASM__
#define BW_GPIOMON_CTRL_ENABLE_BANK_1(v)   BF_CS1(GPIOMON_CTRL, ENABLE_BANK_1, v)
#endif

/* --- Register HW_GPIOMON_CTRL, field ENABLE_BANK_0 */

#define BP_GPIOMON_CTRL_ENABLE_BANK_0      0
#define BM_GPIOMON_CTRL_ENABLE_BANK_0      0x00000001

#define BF_GPIOMON_CTRL_ENABLE_BANK_0(v)   (((v) << 0) & BM_GPIOMON_CTRL_ENABLE_BANK_0)
#ifndef __LANGUAGE_ASM__
#define BW_GPIOMON_CTRL_ENABLE_BANK_0(v)   BF_CS1(GPIOMON_CTRL, ENABLE_BANK_0, v)
#endif



/*
 * HW_GPIOMON_DATAIN - GPIO Monitor DataIn Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned DATA  : 32;
    } B;
} hw_gpiomon_datain_t;
#endif

/*
 * constants & macros for entire HW_GPIOMON_DATAIN register
 */
#define HW_GPIOMON_DATAIN_ADDR      (0x8003c510)

#ifndef __LANGUAGE_ASM__
#define HW_GPIOMON_DATAIN           (*(volatile hw_gpiomon_datain_t *) HW_GPIOMON_DATAIN_ADDR)
#define HW_GPIOMON_DATAIN_RD()      (HW_GPIOMON_DATAIN.U)
#endif


/*
 * constants & macros for individual HW_GPIOMON_DATAIN bitfields
 */
/* --- Register HW_GPIOMON_DATAIN, field DATA */

#define BP_GPIOMON_DATAIN_DATA      0
#define BM_GPIOMON_DATAIN_DATA      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_GPIOMON_DATAIN_DATA(v)   ((reg32_t) v)
#else
#define BF_GPIOMON_DATAIN_DATA(v)   (v)
#endif


/*
 * HW_GPIOMON_DATAOUT - GPIO Monitor DataOut Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned DATA  : 32;
    } B;
} hw_gpiomon_dataout_t;
#endif

/*
 * constants & macros for entire HW_GPIOMON_DATAOUT register
 */
#define HW_GPIOMON_DATAOUT_ADDR      (0x8003c520)
#define HW_GPIOMON_DATAOUT_SET_ADDR  (0x8003c524)
#define HW_GPIOMON_DATAOUT_CLR_ADDR  (0x8003c528)
#define HW_GPIOMON_DATAOUT_TOG_ADDR  (0x8003c52c)

#ifndef __LANGUAGE_ASM__
#define HW_GPIOMON_DATAOUT           (*(volatile hw_gpiomon_dataout_t *) HW_GPIOMON_DATAOUT_ADDR)
#define HW_GPIOMON_DATAOUT_RD()      (HW_GPIOMON_DATAOUT.U)
#define HW_GPIOMON_DATAOUT_WR(v)     (HW_GPIOMON_DATAOUT.U = (v))
#define HW_GPIOMON_DATAOUT_SET(v)    ((*(volatile reg32_t *) HW_GPIOMON_DATAOUT_SET_ADDR) = (v))
#define HW_GPIOMON_DATAOUT_CLR(v)    ((*(volatile reg32_t *) HW_GPIOMON_DATAOUT_CLR_ADDR) = (v))
#define HW_GPIOMON_DATAOUT_TOG(v)    ((*(volatile reg32_t *) HW_GPIOMON_DATAOUT_TOG_ADDR) = (v))
#endif


/*
 * constants & macros for individual HW_GPIOMON_DATAOUT bitfields
 */
/* --- Register HW_GPIOMON_DATAOUT, field DATA */

#define BP_GPIOMON_DATAOUT_DATA      0
#define BM_GPIOMON_DATAOUT_DATA      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_GPIOMON_DATAOUT_DATA(v)   ((reg32_t) v)
#else
#define BF_GPIOMON_DATAOUT_DATA(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_GPIOMON_DATAOUT_DATA(v)   (HW_GPIOMON_DATAOUT.B.DATA = (v))
#endif



/*
 * HW_GPIOMON_DATAOEN - GPIO Monitor DataOEN Register
 */
#ifndef __LANGUAGE_ASM__
typedef union
{
    reg32_t  U;
    struct
    {
        unsigned OUTPUT_ENABLES  : 32;
    } B;
} hw_gpiomon_dataoen_t;
#endif

/*
 * constants & macros for entire HW_GPIOMON_DATAOEN register
 */
#define HW_GPIOMON_DATAOEN_ADDR      (0x8003c530)
#define HW_GPIOMON_DATAOEN_SET_ADDR  (0x8003c534)
#define HW_GPIOMON_DATAOEN_CLR_ADDR  (0x8003c538)
#define HW_GPIOMON_DATAOEN_TOG_ADDR  (0x8003c53c)

#ifndef __LANGUAGE_ASM__
#define HW_GPIOMON_DATAOEN           (*(volatile hw_gpiomon_dataoen_t *) HW_GPIOMON_DATAOEN_ADDR)
#define HW_GPIOMON_DATAOEN_RD()      (HW_GPIOMON_DATAOEN.U)
#define HW_GPIOMON_DATAOEN_WR(v)     (HW_GPIOMON_DATAOEN.U = (v))
#define HW_GPIOMON_DATAOEN_SET(v)    ((*(volatile reg32_t *) HW_GPIOMON_DATAOEN_SET_ADDR) = (v))
#define HW_GPIOMON_DATAOEN_CLR(v)    ((*(volatile reg32_t *) HW_GPIOMON_DATAOEN_CLR_ADDR) = (v))
#define HW_GPIOMON_DATAOEN_TOG(v)    ((*(volatile reg32_t *) HW_GPIOMON_DATAOEN_TOG_ADDR) = (v))
#endif


/*
 * constants & macros for individual HW_GPIOMON_DATAOEN bitfields
 */
/* --- Register HW_GPIOMON_DATAOEN, field OUTPUT_ENABLES */

#define BP_GPIOMON_DATAOEN_OUTPUT_ENABLES      0
#define BM_GPIOMON_DATAOEN_OUTPUT_ENABLES      0xFFFFFFFF

#ifndef __LANGUAGE_ASM__
#define BF_GPIOMON_DATAOEN_OUTPUT_ENABLES(v)   ((reg32_t) v)
#else
#define BF_GPIOMON_DATAOEN_OUTPUT_ENABLES(v)   (v)
#endif
#ifndef __LANGUAGE_ASM__
#define BW_GPIOMON_DATAOEN_OUTPUT_ENABLES(v)   (HW_GPIOMON_DATAOEN.B.OUTPUT_ENABLES = (v))
#endif


#endif /* _GPIOMON_H */

////////////////////////////////////////////////////////////////////////////////
