diff -Naur a/networking/nslookup.c b/networking/nslookup.c
--- a/networking/nslookup.c	2016-06-16 23:09:33.164595687 +0200
+++ b/networking/nslookup.c	2016-06-16 23:09:17.556814693 +0200
@@ -12,10 +12,11 @@
  */
 
 //usage:#define nslookup_trivial_usage
-//usage:       "[HOST] [SERVER]"
+//usage:       "[-timeout=x] [HOST] [SERVER]"
 //usage:#define nslookup_full_usage "\n\n"
 //usage:       "Query the nameserver for the IP address of the given HOST\n"
-//usage:       "optionally using a specified DNS server"
+//usage:       "optionally using a specified DNS server\n"
+//usage:       "optionally setting a timeout in seconds"
 //usage:
 //usage:#define nslookup_example_usage
 //usage:       "$ nslookup localhost\n"
@@ -28,6 +29,11 @@
 #include <resolv.h>
 #include "libbb.h"
 
+/* Awaited format for optional timeout parameter */
+#define TIMEOUT_PARAM_FORMAT "-timeout="
+/* Default timeout when option is not set */
+#define DEFAULT_TIMEOUT 60
+
 /*
  * I'm only implementing non-interactive mode;
  * I totally forgot nslookup even had an interactive mode.
@@ -64,57 +70,77 @@
  * ns3.kernel.org  internet address = 204.152.191.36
  */
 
-static int print_host(const char *hostname, const char *header)
+static int print_host(const char *hostname, const char *header, int timeout)
 {
 	/* We can't use xhost2sockaddr() - we want to get ALL addresses,
 	 * not just one */
-	struct addrinfo *result = NULL;
+	struct addrinfo res;
 	int rc;
 	struct addrinfo hint;
+	struct gaicb a_req;	
+	struct timespec request_to;
+	struct sigevent sevp;
+	struct gaicb *req_table[1] = {&a_req};
 
+	memset(&res, 0, sizeof(res));
 	memset(&hint, 0 , sizeof(hint));
 	/* hint.ai_family = AF_UNSPEC; - zero anyway */
 	/* Needed. Or else we will get each address thrice (or more)
 	 * for each possible socket type (tcp,udp,raw...): */
 	hint.ai_socktype = SOCK_STREAM;
 	// hint.ai_flags = AI_CANONNAME;
-	rc = getaddrinfo(hostname, NULL /*service*/, &hint, &result);
 
-	if (rc == 0) {
-		struct addrinfo *cur = result;
-		unsigned cnt = 0;
+	a_req.ar_name = hostname;
+	a_req.ar_service = NULL;
+	a_req.ar_request = &hint;
+	a_req.ar_result = &res;
 
-		printf("%-10s %s\n", header, hostname);
-		// puts(cur->ai_canonname); ?
-		while (cur) {
-			char *dotted, *revhost;
-			dotted = xmalloc_sockaddr2dotted_noport(cur->ai_addr);
-			revhost = xmalloc_sockaddr2hostonly_noport(cur->ai_addr);
-
-			printf("Address %u: %s%c", ++cnt, dotted, revhost ? ' ' : '\n');
-			if (revhost) {
-				puts(revhost);
-				if (ENABLE_FEATURE_CLEAN_UP)
-					free(revhost);
+	rc = getaddrinfo_a(GAI_NOWAIT, req_table, 1, NULL);
+	if (rc == 0) {
+		request_to.tv_sec = timeout;
+		request_to.tv_nsec = 0;
+		rc = gai_suspend(req_table, 1, &request_to);
+		if (rc == 0)
+			rc = gai_error(&a_req);
+		if (rc == 0) {
+			struct addrinfo *cur = a_req.ar_result;
+			unsigned cnt = 0;
+
+			printf("%-10s %s\n", header, hostname);
+			// puts(cur->ai_canonname); ?
+			while (cur) {
+				char *dotted, *revhost;
+				dotted = xmalloc_sockaddr2dotted_noport(cur->ai_addr);
+				revhost = xmalloc_sockaddr2hostonly_noport(cur->ai_addr);
+				if (dotted) {
+					printf("Address %u: %s%c", ++cnt, dotted, revhost ? ' ' : '\n');
+					if (revhost) {
+						puts(revhost);
+						if (ENABLE_FEATURE_CLEAN_UP)
+							free(revhost);
+					}
+					if (ENABLE_FEATURE_CLEAN_UP)
+						free(dotted);
+				}
+				cur = cur->ai_next;
 			}
-			if (ENABLE_FEATURE_CLEAN_UP)
-				free(dotted);
-			cur = cur->ai_next;
 		}
-	} else {
+		/* Whatever hapened we cancel the previous request */
+		gai_cancel(&a_req);
+	}
+
+	if (rc != 0) {
 #if ENABLE_VERBOSE_RESOLUTION_ERRORS
 		bb_error_msg("can't resolve '%s': %s", hostname, gai_strerror(rc));
 #else
 		bb_error_msg("can't resolve '%s'", hostname);
 #endif
 	}
-	if (ENABLE_FEATURE_CLEAN_UP && result)
-		freeaddrinfo(result);
 	return (rc != 0);
 }
 
 /* lookup the default nameserver and display it */
-static void server_print(void)
+static void server_print(int timeout)
 {
 	char *server;
 	struct sockaddr *sa;
@@ -126,7 +152,7 @@
 		sa = (struct sockaddr*)&_res.nsaddr_list[0];
 	server = xmalloc_sockaddr2dotted_noport(sa);
 
-	print_host(server, "Server:");
+	print_host(server, "Server:", timeout);
 	if (ENABLE_FEATURE_CLEAN_UP)
 		free(server);
 	bb_putchar('\n');
@@ -169,8 +195,31 @@
 int nslookup_main(int argc, char **argv) MAIN_EXTERNALLY_VISIBLE;
 int nslookup_main(int argc, char **argv)
 {
-	/* We allow 1 or 2 arguments.
-	 * The first is the name to be looked up and the second is an
+	int timeout = DEFAULT_TIMEOUT;
+
+	/* We allow 1 to  3 arguments.
+	 * The first is the optional timeout paramter
+	 */
+	 if (argc > 2) {
+		int to_len = strlen(TIMEOUT_PARAM_FORMAT);
+		if (strlen(argv[1]) > to_len) {
+			/* Extract timeout if option is available 
+			 * Don't use getopts as awaited format is incomptaible
+			 */
+		 	if (strncmp(argv[1], TIMEOUT_PARAM_FORMAT, to_len) == 0) {
+				timeout = strtol(&argv[1][to_len], NULL, 10);
+				if ((timeout == LONG_MIN) ||
+					(timeout == LONG_MAX)) {
+					bb_show_usage();	
+				}
+				/* shift args */
+				argv++;
+				argc--;
+			}
+		}
+	 }
+	 
+	/* name to be looked up and the second is an
 	 * optional DNS server with which to do the lookup.
 	 * More than 3 arguments is an error to follow the pattern of the
 	 * standard nslookup */
@@ -183,10 +232,10 @@
 	/* rfc2133 says this enables IPv6 lookups */
 	/* (but it also says "may be enabled in /etc/resolv.conf") */
 	/*_res.options |= RES_USE_INET6;*/
+	if (argc == 3)
+		set_default_dns(argv[2]);
 
-	set_default_dns(argv[2]);
-
-	server_print();
+	server_print(timeout);
 
 	/* getaddrinfo and friends are free to request a resolver
 	 * reinitialization. Just in case, set_default_dns() again
@@ -194,7 +243,8 @@
 	 * with bug 675 "nslookup does not properly use second argument"
 	 * at least on Debian Wheezy and Openwrt AA (eglibc based).
 	 */
-	set_default_dns(argv[2]);
+	 if (argc == 3)
+		set_default_dns(argv[2]);
 
-	return print_host(argv[1], "Name:");
+	return print_host(argv[1], "Name:", timeout);
 }
diff -Naur a/Makefile b/Makefile
--- a/Makefile	2016-06-16 23:16:20.463224804 +0200
+++ b/Makefile	2016-06-16 23:16:40.606960281 +0200
@@ -323,7 +323,7 @@
 CPPFLAGS	:= $(CPPFLAGS)
 AFLAGS		:= $(AFLAGS)
 LDFLAGS		:= $(LDFLAGS)
-LDLIBS		:=
+LDLIBS		:= anl
 
 # Read KERNELRELEASE from .kernelrelease (if it exists)
 KERNELRELEASE = $(shell cat .kernelrelease 2> /dev/null)
